#!/bin/sh

cd "$(dirname "$(readlink -f "$0")")"
. ../common/lab-setup

# 2: regular public network
# 3: public network through NAT GW
# 4: internet
# 5: dedicated network for conntrackd
unset SWITCH_HUB
spawn vm H1       network  10
spawn vm H2       network  20
spawn vm H3       network  30
spawn vm HV       networks 10,20,30,2,3
spawn vm NAT1     networks 3,60,5
spawn vm NAT2     networks 3,70,5
spawn vm ER       networks 2,4,60,70
spawn vm internet network  4

run

# Executed on each VM
case $uts in
    HV)
        ip addr add 10.0.1.1/24 dev eth0
        ip addr add 10.0.2.1/24 dev eth1
        ip addr add 10.0.3.1/24 dev eth2
        ip addr add 203.0.113.10/24 dev eth3
        ip route add default via 203.0.113.1
        sysctl -qw net.ipv4.ip_forward=1

        # Regular SNAT for VMs
        iptables -t nat -A POSTROUTING -o eth3 -j SNAT --to-source 203.0.113.10

        ## NAT GW
        ip addr add 169.254.34.10/24 dev eth4
        # One routing table for each NAT gateway
        ip rule add fwmark 0x10/0x70 table 100
        ip rule add fwmark 0x20/0x70 table 101
        ip route add default via 169.254.34.1 table 100
        ip route add default via 169.254.34.2 table 101
        # Chain to use the NAT gateway. First one restore the mark and
        # second one put it on new connections.
        iptables -t mangle -N NATGW1
        iptables -t mangle -A NATGW1 -j CONNMARK --restore-mark --mask 0x70
        iptables -t mangle -A NATGW1 -m conntrack --ctstate NEW -j MARK --set-mark 0x10/0x70
        iptables -t mangle -N NATGW2
        iptables -t mangle -A NATGW2 -j CONNMARK --restore-mark --mask 0x70
        iptables -t mangle -A NATGW2 -m conntrack --ctstate NEW -j MARK --set-mark 0x20/0x70
        # SNAT for VMs using the NAT GW
        iptables -t nat -A POSTROUTING -o eth4 -j SNAT --to-source 169.254.34.10
        iptables -t mangle -A POSTROUTING -m mark ! --mark 0/0x70 -j CONNMARK --save-mark --mask 0x70
        # Second and third VM will use the NAT GW. The pool is chosen
        # randomly. This rule should be set by the orchestrator.
        iptables -t mangle -A PREROUTING -i eth1 -j NATGW$(shuf -i 1-2 -n 1)
        iptables -t mangle -A PREROUTING -i eth2 -j NATGW$(shuf -i 1-2 -n 1)
        ;;
    NAT*)
        # Active/active setup with keepalived.
        template keepalived.NATx.conf keepalived.$uts.conf \
                 priority1=$((150 - ${uts#NAT})) \
                 priority2=$((150 + ${uts#NAT})) \
                 pwd="'$PWD'"
        service keepalived -P -f $PWD/keepalived.$uts.conf

        # VMAC on eth0
        sysctl -qw net.ipv4.conf.all.arp_ignore=1
        sysctl -qw net.ipv4.conf.all.arp_announce=1
        sysctl -qw net.ipv4.conf.all.arp_filter=0
        sysctl -qw net.ipv4.conf.eth0.arp_filter=1

        ip addr add 169.254.34.25${uts#NAT}/24 dev eth0
        ip addr add 198.51.100.$(( ${uts#NAT} * 2 - 1 ))/31 dev eth1
        ip route add default via 198.51.100.$(( ${uts#NAT} * 2 - 2 ))
        sysctl -qw net.ipv4.ip_forward=1

        # Choose the address pool depending on the source VRRP MAC address
        iptables -t mangle -I PREROUTING -i vrrp.11 -j MARK --set-mark 0x10/0x70
        iptables -t mangle -I PREROUTING -i vrrp.12 -j MARK --set-mark 0x20/0x70
        iptables -t nat -A POSTROUTING -o eth1 -m mark --mark 0x10/0x70 -j SNAT --to-source 203.0.113.128-203.0.113.190 --persistent
        iptables -t nat -A POSTROUTING -o eth1 -m mark --mark 0x20/0x70 -j SNAT --to-source 203.0.113.192-203.0.113.253 --persistent
        sysctl -qw net.netfilter.nf_conntrack_tcp_loose=1

        # Use conntrackd on top of that for almost seamless redundancy
        ip addr add 169.254.100.${uts#NAT}/24 dev eth2
        template conntrackd.NATx.conf conntrackd.$uts.conf \
                 ipv4="'169.254.100.${uts#NAT}'" \
                 hashlimit=$(( $(cat /proc/sys/net/netfilter/nf_conntrack_max) * 2 ))
        service conntrackd -C $PWD/conntrackd.$uts.conf -d

        # BIRD for routing public addresses
        template bird.NATx.conf bird.$uts.conf x=${uts#NAT}
        service bird

        # NAT events logging with ulogd
        # https://home.regit.org/2014/02/logging-connection-tracking-event-with-ulogd/
        modprobe nf_conntrack_netlink
        sysctl -qw net/netfilter/nf_conntrack_acct=1
        sysctl -qw net/netfilter/nf_conntrack_timestamp=1
        service ulogd -d -c $PWD/ulogd.conf
        ;;
    ER)
        ip addr add 203.0.113.1/24 dev eth0
        ip addr add 192.0.2.1/24 dev eth1
        ip addr add 198.51.100.0/31 dev eth2
        ip addr add 198.51.100.2/31 dev eth3
        service bird
        sysctl -qw net.ipv4.ip_forward=1
        ;;
    H*)
        ip addr add 10.0.${uts#H}.10/24 dev eth0
        ip route add default via 10.0.${uts#H}.1
        sysctl -qw net.ipv4.ip_forward=1
        ;;
    internet)
        # Accurate simulation of Internet
        ip addr add 192.0.2.10/24 dev eth0
        ip route add default via 192.0.2.1
        service nginx
        # tail -f /var/log/nginx/access.log
        ;;
esac
