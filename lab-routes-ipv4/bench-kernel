#!/bin/sh

# WIP, incomplete.

# Run a quick bench on a given kernel. This script will boot a kernel
# from a given directory, setup the routes execute the bench and
# retrieve the results.

# The bootable kernel should be provided as first argument. It is
# expected it contains the ability to boot an initrd and talk on the
# serial console without additional modules. The dummy network module
# will be retrieved automatically in a nearby directory.

# Old kernels can be retrieved from:
#  - http://snapshot.debian.org/package/linux-2.6/
#  - http://snapshot.debian.org/package/linux/
#  - http://snapshot.debian.org/package/linux-kbuild-2.6/
# You need those packages:
#  - linux-headers-X-common_Y.deb
#  - linux-headers-X-amd64_Y.deb
#  - linux-image-X-amd64_Y.deb
#  - linux-kbuild-X_Y.deb

# As a second argument, we should have the output of "ip route save"
# that will be used to restore the same routes. This only works if the
# interfaces are the same than the ones in this script. The interfaces
# in this script are lo (index 1), dummy0 (index 2), out1 to out5
# (index 3 to 7). The easiest way to get a compatible dump from the
# ./setup script is to remove out6, flush routes and execute one of
# the route setup script:
#
#     ip link del out6
#     ip route flush scope global
#     ./from-bgp -n 10000 --batch 1000 \
#          203.0.113.3 203.0.113.5  203.0.113.7 \
#          203.0.113.9 203.0.113.11 203.0.113.13
#     ip route save scope global > stats/bgp-10000

set -e

KERNEL=$1
[ -f "$KERNEL" ] || {
    >&2 echo "$KERNEL not found"
    exit 1
}
VERSION=$(file "$KERNEL" | sed -n 's/.*, version \([^ ]*\).*/\1/p')
[ -n "$VERSION" ] || {
    >&2 echo "Cannot found version for $KERNEL"
    exit 1
}
RTDUMP=$2
[ -f "$RTDUMP" ] || {
    >&2 echo "$RTDUMP not found"
    exit 1
}

TMP=$(mktemp -d)
trap "rm -rf $TMP" EXIT

for dir in "$(dirname $KERNEL)/../lib/modules/$VERSION" "$(dirname $KERNEL)/lib/modules/$VERSION" "/lib/modules/$VERSION"; do
    [ -d $dir ] || continue
    MODULES="$dir"
    break
done
[ -n "$MODULES" ] || {
    >&2 echo "Cannot find modules for $KERNEL"
    exit 1
}
for dir in "$MODULE/build" "$(dirname $KERNEL)/../usr/src/linux-headers-$VERSION"  "/usr/src/linux-headers-$VERSION"; do
    [ -f $dir/Makefile ] || continue
    KDIR="$dir"
    break
done
[ -n "$KDIR" ] || {
    >&2 echo "Cannot find headers for $KERNEL"
    exit 1
}

# kbench compilation
rm -f kbench_mod.ko
make KDIR=${KDIR}

# init script
cat <<EOF > ${TMP}/init
#!/bin/sh
export PATH=/usr/local/bin:/usr/bin:/bin:/sbin:/usr/local/sbin:/usr/sbin
. /modules
mount -n -t proc  proc /proc
mknod /dev/null c 1 3
mknod /dev/ttyS1 c 4 65
for i in 1 2 3 4 5; do
    ip link add name out\$i type dummy
    ip link set up dev out\$i
    ip addr add 203.0.113.\$((i*2))/31 dev out\$i
done
ip route restore < /rtdump || sh
echo hello > /dev/ttyS1
echo b > /proc/sysrq-trigger
EOF

# initrd
DESTDIR=$TMP/initrd
mkdir -p $DESTDIR
bins="busybox ip"
busybox --list | grep -qFx insmod || bins="$bins insmod"
for bin in $bins; do
    install -D "$(command -v $bin)" ${DESTDIR}/bin/$bin
    for x in $(ldd "$(command -v $bin)" 2> /dev/null | sed -e '
               /\//!d;
               /linux-gate/d;
               /=>/ {s/.*=>[[:blank:]]*\([^[:blank:]]*\).*/\1/};
               s/[[:blank:]]*\([^[:blank:]]*\) (.*)/\1/' 2>/dev/null); do
        [ -f "${DESTDIR}/$x" ] || install -D "$x" "${DESTDIR}/$x"
    done
done
for applet in $(${DESTDIR}/bin/busybox --list); do
    [ -f ${DESTDIR}/bin/${applet} ] || ln -s busybox ${DESTDIR}/bin/${applet}
done
modules="dummy ./kbench_mod.ko"
for mod in $modules; do
    base="${MODULES}"/../../..
    cmd="modprobe --all --set-version=${VERSION} -d ${base} --ignore-install --quiet --show-depends $mod"
    $cmd > /dev/null || {
        depmod -b ${base} ${VERSION} 2> /dev/null && $cmd > /dev/null || {
                >&2 echo "Module $mod is missing"
                exit 1
            }
    }
    $cmd | while read prefix kmod options ; do
        [ "${prefix}" = "insmod" ] || continue
        grep -qFw "$kmod" ${DESTDIR}/modules 2> /dev/null || {
            install -D "$kmod" "${DESTDIR}/${kmod}"
            echo $prefix $kmod $options >> ${DESTDIR}/modules
        }
    done
done

cp ${TMP}/init ${DESTDIR}/init && chmod +x ${DESTDIR}/init
cp "${RTDUMP}" ${DESTDIR}/rtdump
mkdir -p ${DESTDIR}/proc ${DESTDIR}/dev
(cd "${DESTDIR}" && find . | cpio --quiet -R 0:0 -o -H newc) | gzip > $TMP/initrd.gz

# Boot
qemu-system-$(uname -m) \
            -enable-kvm \
            -nodefconfig -nodefaults \
            -display none \
            -chardev stdio,id=charserial0,signal=off \
            -device isa-serial,chardev=charserial0,id=serial0 \
            -chardev file,id=charserial1,path=${TMP}/output \
            -device isa-serial,chardev=charserial1,id=serial1 \
            -no-reboot \
            -kernel $KERNEL \
            -initrd $TMP/initrd.gz \
            -append "console=ttyS0 panic=1 8250.nr_uarts=4" || :

mkdir -p stats/kernel
[ ! -s ${TMP}/output ] || cp ${TMP}/output stats/kernel/${VERSION}
