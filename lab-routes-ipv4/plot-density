#!/usr/bin/env python3

"""Plot density of route distribution from an MRT dump.

Not done.
"""

from __future__ import print_function

import sys
import argparse
import logging
import mrtparse
import numpy as np
import ipaddress


logger = logging.getLogger("plot-density")


def parse_args():
    """Parse arguments."""
    parser = argparse.ArgumentParser(
        description=sys.modules[__name__].__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument("--radius", default=300, metavar="R",
                        type=float, help="radius for the polar plot")
    parser.add_argument("--min-plen", default=0, metavar="PLEN",
                        type=int, help="minimum prefix length to plot")
    parser.add_argument("--max-plen", default=24, metavar="PLEN",
                        type=int, help="maximum prefix length to plot")
    parser.add_argument("mrtdump", metavar="MRTDUMP",
                        help="MRT dump file")

    return parser.parse_args()


def setup_logging():
    """Configure logging."""
    root = logging.getLogger("")
    root.setLevel(logging.WARNING)
    logger.setLevel(logging.DEBUG)
    ch = logging.StreamHandler()
    ch.setFormatter(logging.Formatter(
        "%(levelname)s[%(name)s] %(message)s"))
    root.addHandler(ch)


if __name__ == "__main__":
    options = parse_args()
    setup_logging()

    try:
        data = {}
        for plen in range(options.min_plen, options.max_plen + 1):
            nb = options.max_plen - options.min_plen + 1
            # Number of bins is the number of pixels
            bins = int((options.radius * 2 * np.pi *
                        (plen - options.min_plen + 1)) // nb)
            bins = min(2**plen, bins)
            for i in range(plen+1):
                if 2**i >= bins:
                    bins = 2**i
                    break
            logger.debug(
                "prefix length %d will use %d bins (%.1f elements per bin)",
                plen, bins, 2**plen/bins)
            data[plen] = np.zeros(bins)
        logger.info("extracting data from %s", options.mrtdump)
        r = mrtparse.Reader(options.mrtdump)
        i = 0
        for m in r:
            m = m.mrt
            if m.type != mrtparse.MRT_T['TABLE_DUMP_V2']:
                continue
            if m.subtype != mrtparse.TD_V2_ST['RIB_IPV4_UNICAST']:
                continue

            i += 1
            if i % 10000 == 0:
                logger.debug("extracted %d records", i)
                break

            prefix = m.rib.prefix
            plen = m.rib.plen
            if plen > options.max_plen or plen < options.min_plen:
                continue

            # In which bin do we put this prefix?
            pos = int(ipaddress.ip_address(prefix)) >> (32 - plen)
            bins = len(data[plen])
            rbin = pos * bins // 2**plen
            data[plen][rbin] += bins/2**plen

        # Left to do: do a polar plot with those data.
    except Exception as e:
        logger.exception("%s", e)
        sys.exit(1)
