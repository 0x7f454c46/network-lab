#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""Run a benchmark with iperf3, collect data and graph results.

Collected data currently include the output of ss for the appropriate
socket.
"""

import os
import sys
import pty
import logging
import logging.handlers
import argparse
import asyncio
import time
import collections
import re
import csv
import functools
import numpy as np
import matplotlib.pylab as mp

logger = logging.getLogger("benchmark")


class Statistics(object):
    """Keep various statistics as a time serie."""

    def __init__(self, precision=1):
        """Create a new object for collecting statistics.

        The provided precision is in seconds.
        """
        self.__statistics = collections.defaultdict(dict)
        self.__precision = precision
        self.__properties = []
        self.__properties_remote = []

    @property
    def properties(self):
        return self.__properties + self.__properties_remote

    def dump(self, target):
        """Write statistics to a file"""
        writer = csv.DictWriter(target, delimiter="|",
                                fieldnames=["time",] + self.properties)
        writer.writeheader()
        keys = sorted(self.__statistics.keys())
        for k in keys:
            row = {"time": k}
            row.update(self.__statistics[k])
            writer.writerow(row)

    def set(self, name, value):
        if name.startswith("remote_"):
            if name not in self.__properties_remote:
                self.__properties_remote.append(name)
        else:
            if name not in self.__properties:
                self.__properties.append(name)
        now = int(time.time() / self.__precision) * self.__precision
        self.__statistics[now][name] = value


def parse():
    """Parse arguments"""
    parser = argparse.ArgumentParser(
        description=sys.modules[__name__].__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter)

    g = parser.add_mutually_exclusive_group()
    g.add_argument("--debug", "-d", action="store_true",
                   default=False,
                   help="Enable debugging")
    g.add_argument("--silent", "-s", action="store_true",
                   default=False,
                   help="Don't log to console")

    subparsers = parser.add_subparsers(title='subcommands', dest='command')

    run = subparsers.add_parser('run', help='run benchmark')
    run.add_argument("target", metavar="TARGET", type=str,
                     help="Target host (running iperf3 on server mode)")
    run.add_argument("--frequency", metavar="SECONDS", type=int,
                     default=1,
                     help="Frequency of data collection")
    run.add_argument("--duration", metavar="SECONDS", type=int,
                     default=120,
                     help="Test length in seconds")
    run.add_argument("--output", metavar="FILE", type=str,
                     default="results.csv",
                     help="Output file for results")
    run.add_argument("--remote-stats", action="store_true",
                     default=False,
                     help="Collect stats on remote hosts too")

    graph = subparsers.add_parser('graph', help='produce graphs from results')
    graph.add_argument("input", metavar="FILE", type=str,
                       help="Result file")
    graph.add_argument("--format", "-f", metavar="FMT", type=str,
                       choices=("svg", "pdf", "png"),
                       default="pdf",
                       help="Output format")

    options = parser.parse_args()
    return options

def setup_logging(debug, silent):
    """Setup logger"""
    logger = logging.getLogger()
    logger.setLevel(debug and logging.DEBUG or logging.INFO)
    if sys.stderr.isatty() and not silent:
        ch = logging.StreamHandler()
        ch.setFormatter(logging.Formatter(
            "%(levelname)s[%(name)s] %(message)s"))
        logger.addHandler(ch)

@asyncio.coroutine
def run_iperf(loop, options, stats):
    """Run an iperf3 instance"""
    connection_line = re.compile(r"^\[\s*\d+\] local \S+ port (?P<local>\d+) connected to \S+ port (?P<remote>\d+)$")
    bandwidth_line = re.compile(r"^\[\s*\d+\]\s+[-0-9.]+\s+sec\s+\S+\s+\S+\s+(?P<bandwidth>\d+) Kbits/sec.*$")

    # Prepare remote SSH connection
    if options.remote_stats:
        try:
            import asyncssh
        except ImportError:
            logger.error("Unable to get remote stats without asyncssh")
            remote_conn = None
        else:
            logger.info("Establishing SSH connection to {}".format(options.target))
            remote_conn = yield from asyncssh.connect(options.target,
                                                      known_hosts=None,
                                                      username="root")

    # It's a hack, we request a PTY to get an unbuffered read
    master, slave = pty.openpty()
    master = os.fdopen(master, "w")
    slave = os.fdopen(slave, "r")

    args = ("-c", options.target,
            "-i", str(options.frequency),
            "-t", str(options.duration),
            "-f", "k")
    create = asyncio.create_subprocess_exec("iperf3",
                                            *args,
                                            stdin=asyncio.subprocess.DEVNULL,
                                            stdout=master,
                                            stderr=asyncio.subprocess.DEVNULL,
                                            loop=loop)
    proc = yield from create
    logger.info("iperf3 running...")

    def header_reader():
        # We may block on the following line, unfortunately, but we
        # don't want to do too complex stuff.
        data = slave.readline()
        if data == "":
            return
        data = data.rstrip()
        mo = connection_line.match(data)
        if not mo:
            return

        # We got the local and remote port, we can start collecting
        # statistics with ss
        local = int(mo.group('local'))
        remote = int(mo.group('remote'))
        logger.info("Starting ss collector (local: {}, remote: {})".format(local, remote))
        loop.create_task(run_local_ss(loop, options, stats,
                                local, remote))
        if remote_conn:
            loop.create_task(run_remote_ss(loop, options, stats,
                                           local, remote, remote_conn))
        loop.remove_reader(slave.fileno())
        loop.add_reader(slave.fileno(), bandwidth_reader)

    def bandwidth_reader():
        data = slave.readline()
        if data == "":
            return
        data = data.rstrip()
        if data.startswith("- - - - -"):
            # That's the summary line
            loop.remove_reader(slave.fileno())
            return
        mo = bandwidth_line.match(data)
        if not mo:
            return

        bandwidth = int(mo.group('bandwidth')) * 1000 // 8
        stats.set("bandwidth", bandwidth)
        logger.debug("Saving statistics from iperf: {}".format({"bandwidth": bandwidth}))

    loop.add_reader(slave.fileno(), header_reader)
    yield from proc.wait()
    logger.info("iperf3 stopped with return code {}".format(proc.returncode))
    loop.remove_reader(slave)
    if loop.is_running():
        loop.stop()

@asyncio.coroutine
def run_remote_ss(loop, options, stats, localport, remoteport, conn):
    """Run `ss' on remote host using SSH."""
    while True:
        now = time.time()
        stdin, stdout, stderr = yield from conn.open_session(
            ("ss"
             " -tn"
             " --info"
             " --extended"
             " --memory"
             " --process"
             " --options"
             " '( sport == :{} and dport == :{} )'").format(remoteport,
                                                            localport),
            encoding=None)
        yield from run_ss(loop, options, stats,
                          remoteport, localport,
                          stdout,
                          "remote")
        duration = now - time.time() + options.frequency
        if duration > 0:
            yield from asyncio.sleep(duration)


@asyncio.coroutine
def run_local_ss(loop, options, stats, localport, remoteport):
    """Run `ss' locally to collect statistics."""
    while True:
        now = time.time()
        create = asyncio.create_subprocess_exec("ss",
                                                "-tn",
                                                "--info",
                                                "--extended",
                                                "--memory",
                                                "--process",
                                                "--options",
                                                "( sport == :{} and dport == :{} )".format(localport, remoteport),
                                                stdin=asyncio.subprocess.DEVNULL,
                                                stdout=asyncio.subprocess.PIPE,
                                                stderr=asyncio.subprocess.DEVNULL,
                                                loop=loop)
        proc = yield from create
        yield from run_ss(loop, options, stats,
                          localport, remoteport,
                          proc.stdout)
        yield from proc.wait()
        if proc.returncode != 0:
            logger.error("ss failed with return code {}".format(proc.returncode))
        duration = now - time.time() + options.frequency
        if duration > 0:
            yield from asyncio.sleep(duration)


@asyncio.coroutine
def run_ss(loop, options, stats, localport, remoteport, stdout, prefix=""):
    """Run `ss' to collect statistics."""
    first_line = re.compile(r"^(?P<state>[-A-Z0-9]+)\s+"
                            r"(?P<recvq>\d+)\s+(?P<sendq>\d+)\s+"
                            r"(?P<local>\S+)\s+(?P<remote>\S+)\s+"
                            r"(?P<data>.*) \<-\>$")

    # Ignore the first line
    data = yield from stdout.readline()

    # Decode each subsequent couple of lines
    while True:
        line1 = yield from stdout.readline()
        line1 = line1.decode('ascii').rstrip()
        if line1 == "":
            break

        if not line1.startswith("ESTAB"):
            continue
        mo = first_line.match(line1)
        if not mo:
            continue
        local = mo.group('local')
        remote = mo.group('remote')
        sendq = int(mo.group('sendq'))
        recvq = int(mo.group('recvq'))

        line2 = yield from stdout.readline()
        line2 = line2.decode('ascii').strip()
        if line2 == "":
            break

        # The general format is `key:value' or just `key'. Try
        # to normalize some special cases and convert to a
        # dictionary.
        data = "{} {}".format(mo.group('data'), line2)
        data = re.sub(r"([a-z_]+) (\d)", r"\1:\2", data).split(" ")
        results = collections.OrderedDict()
        results["local"] = local
        results["remote"] = remote
        results["sendq"] = sendq
        results["recvq"] = recvq
        for d in data:
            d = d.rsplit(":")
            if len(d) == 1:
                results[d[0]] = True
            elif d[0] == "skmem":
                # Special case:
                # (r0,rb372480,t0,tb87040,f0,w0,o0,bl0)
                for mo in re.finditer(r"(\w+?)(\d+)", d[1]):
                    results["skmem_{}".format(mo.group(1))] = mo.group(2)
            else:
                results[d[0]] = d[1]

        for prop in results:
            if prefix:
                key = "{}_{}".format(prefix, prop)
            else:
                key = prop
            stats.set(key, results[prop])
        logger.debug("Saving statistics from {} ss: {}".format(prefix, results))
        break


def run_loop_exception(loop, context):
    """Handle exceptions in a loop."""
    # For some reason, log.exception doesn't work here
    logger.error("Uncaught error: {}".format(context))
    if loop.is_running():
        loop.stop()


def run_output(options, stats):
    """Write results to the output file."""
    logger.info("Writing statistics to {}...".format(options.output))
    with open(options.output, "w") as target:
        stats.dump(target)


def run(options):
    """Run a benchmark."""
    stats = Statistics(options.frequency)
    loop = asyncio.get_event_loop()
    loop.set_exception_handler(run_loop_exception)
    loop.create_task(run_iperf(loop, options, stats))
    try:
        logger.debug("Start main loop")
        loop.run_forever()
    except KeyboardInterrupt:
        pass
    finally:
        logger.debug("Cancelling all tasks...")
        pending = asyncio.Task.all_tasks()
        for task in pending:
            task.cancel()
        loop.run_until_complete(asyncio.gather(*pending,
                                               return_exceptions=True))
        for task in pending:
            try:
                task.exception()
            except asyncio.CancelledError:
                pass
        loop.close()
    # Write output
    run_output(options, stats)


def graph_smooth(x, win=4, centered=True):
    """Smooth some dataset over a given window."""
    if not centered:
        win = win*2
    s = np.r_[x[win-1:0:-1], x, x[-1:-win:-1]]
    if centered:
        w = np.ones(win, 'd')
    else:
        w = np.concatenate([[0.]*(win//2), [1.]*(win//2)])
    y = np.convolve(w/w.sum(), s, mode='valid')
    return y[(win-1)//2:-(win-1)//2]


def graph_formatter(unit, x, pos):
    """Provide an appropriate formatter for SI."""
    if x >= 1e6:
        return "{:-1.1f}M{}".format(x/1e6, unit)
    if x >= 1e3:
        return "{:-1.1f}K{}".format(x/1e3, unit)
    return "{:-1.0f}{}".format(x, unit)


def graph(options):
    """Build graph from results."""
    logger.debug("Reading results from {}...".format(options.input))
    with open(options.input) as source:
        tof = lambda x: float(x)
        converterd = {
            "rtt": lambda x: float(x.split("/")[0] or '-1.'),
            # Convert most fields to float to get "None" value
            "rcv_space": tof,
            "cwnd": tof,
            "mss": tof,
            "bandwidth": tof,
            "unacked": tof,
            "retrans": lambda x: float(x.split("/")[-1] or '-1.'),
            "lost": tof,
            "sacked": tof,
            "reordering": tof,
            "skmem_r": tof,
            "skmem_rb": tof,
            "skmem_t": tof,
            "skmem_tb": tof,
            "skmem_f": tof,
            "skmem_w": tof,
            "sendq": tof
        }
        for k in list(converterd.keys()):
            # Apply same transformation for remotes
            converterd["remote_{}".format(k)] = converterd[k]
        data = mp.csv2rec(source, delimiter="|",
                          converterd=converterd)
        time = data.time - min(data.time)
    target = "{}.{}".format(os.path.splitext(options.input)[0],
                            options.format)
    # See: http://vincent.bernat.im/en/blog/2011-plot-benchmark-results-matplotlib.html
    mp.rcParams['font.size'] = 9
    mp.figure(num=None, figsize=(8.27, 11.69), dpi=300)
    mp.suptitle(os.path.splitext(options.input)[0], fontsize=14)

    # On the first one, we put rwin and cwnd on left axis,
    # send/receive bandwidth on right axis
    lns = []
    ax1 = mp.subplot2grid((3, 1), (0, 0))
    ax1.set_xlim(right=max(time))
    try:
        rcv_buffer = data.remote_skmem_rb.astype(float)
        rcv_rtt = data.remote_rcv_rtt.astype(float)
    except AttributeError:
        rcv_buffer = data.skmem_rb.astype(float)
        try:
            rcv_rtt = data.rcv_rtt.astype(float)
        except AttributeError:
            # Did not send anything...
            rcv_rtt = None
    else:
        logger.debug("Using remote receive buffer for receive window")
    lns.extend(ax1.plot(time, rcv_buffer / 2.,
                        '-', color='IndianRed', label='Receive window'))
    lns.extend(ax1.plot(time, data.cwnd.astype(float) * data.mss.astype(float),
                        '-', color='RoyalBlue', label='Congestion window'))
    lns.extend(ax1.plot(time,
                        data["sendq"].astype(float), "-", linewidth=0.5,
                        color='DarkSlateGray', label="Send-Q"))
    ax1.grid(True, which="both", linestyle="dotted")
    ax1.set_ylabel("Window size (bytes)", fontsize=9)
    ax1.yaxis.set_major_formatter(mp.FuncFormatter(functools.partial(graph_formatter, "")))
    ax1.set_ylim(bottom=0, auto=True)
    ax2 = ax1.twinx()
    ax2.set_xlim(right=max(time))
    lns.extend(ax2.plot(time,
                        data.cwnd.astype(float) * data.mss.astype(float) * 1000. / data.rtt.astype(float),
                        '-', color='DarkViolet', label='Max send bandwidth'))
    if rcv_rtt is not None:
        lns.extend(ax2.plot(time,
                            rcv_buffer * 1000. / 2. / rcv_rtt,
                            '-', color='DarkOrange', label='Max receive bandwidth'))
    # For current bandwidth, we smooth it a bit to account for
    # measurement imprecisions.
    bw = graph_smooth(data.bandwidth.astype(float), 4, True)
    lns.extend(ax2.plot(time,
                        bw,
                        '-', color='ForestGreen', linewidth=2, label='Current bandwidth'))
    ax2.plot(time,
             data.bandwidth.astype(float),
             ':', color='ForestGreen')
    ax2.plot(time,
             [np.nan] * (len(time) - len(time) // 2) +
             [np.mean(data.bandwidth[~np.isnan(data.bandwidth.astype(float))][len(time) // 2:])] * (len(time) // 2),
             '--', color='ForestGreen', linewidth=0.5)
    bw = bw[len(time) // 2:]
    bw = bw[~np.isnan(bw)]
    ax2.add_patch(mp.Rectangle((time[len(time) // 2], min(bw)),
                               time[len(time) // 2], max(bw) - min(bw),
                               alpha=0.1, facecolor='ForestGreen'))
    ax2.grid(True, which="both", linestyle="dotted", color="0.7")
    ax2.set_ylabel("Bandwidth (bytes per sec)", fontsize=9)
    ax2.get_yticklabels()[0].set_visible(False)
    ax2.yaxis.set_major_formatter(mp.FuncFormatter(functools.partial(graph_formatter, "")))
    ax2.set_ylim(bottom=0, auto=True)

    ax2.legend(lns, [l.get_label() for l in lns],
               loc='best', fancybox=True, shadow=True,
               prop=dict(size=7), ncol=1, framealpha=0.7)

    # On the second graph, we plot unacked, retrans, lost, sacked and reordering counts.
    lns = []
    ax3 = mp.subplot2grid((3, 1), (1, 0), sharex=ax1)
    ax3.set_xlim(right=max(time))
    ax3.grid(True, which="both", linestyle="dotted")
    ax3.yaxis.set_major_formatter(mp.FuncFormatter(functools.partial(graph_formatter, "")))
    counts = "unacked lost sacked reordering".split(" ")
    colors = mp.cm.Accent(np.linspace(0, 1, len(counts) + 1))
    ax4 = ax3.twinx()
    ax4.set_xlim(right=max(time))
    lns.extend(ax4.plot(time,
                        data.retrans.astype(float),
                        '-', color=colors[0], label="Retrans"))
    for idx, what in enumerate(counts):
        lns.extend(ax3.plot(time,
                            data[what].astype(float),
                            idx == 0 and '-' or '--', color=colors[idx+1],
                            label=what.capitalize()))
    ax3.set_ylim(bottom=0, auto=True)
    ax4.grid(True, which="both", linestyle="dotted", color="0.7")
    ax4.get_yticklabels()[0].set_visible(False)
    ax4.yaxis.set_major_formatter(mp.FuncFormatter(functools.partial(graph_formatter, "")))
    ax4.set_ylim(bottom=0, auto=True)
    for tl in ax4.get_yticklabels():
        tl.set_color(colors[0])

    ax3.legend(lns, [l.get_label() for l in lns],
               loc='best', fancybox=True, shadow=True,
               prop=dict(size=7), ncol=2, framealpha=0.8)

    ax5 = mp.subplot2grid((3, 1), (2, 0), sharex=ax1)
    ax5.set_xlim(right=max(time))
    ax5.grid(True, which="both", linestyle="dotted")
    ax5.yaxis.set_major_formatter(mp.FuncFormatter(functools.partial(graph_formatter, "")))
    colors = mp.cm.Paired(np.linspace(0, 1, 6))
    try:
        data.remote_skmem_r
        data.remote_skmem_rb
    except AttributeError:
        mayber = lambda x: x
    else:
        logger.debug("Using remote skmem_r/rb")
        mayber = lambda x: "remote_{}".format(x)
    for what in [
            [mayber("skmem_r"), "rmem-alloc", colors[0], '--'],
            [mayber("skmem_rb"), "rcvbuf", colors[1], '-'],
            ["skmem_t", "wmem-alloc", colors[2], '--'],
            ["skmem_tb", "sndbuf", colors[3], '-'],
            ["skmem_f", "fwd-alloc", colors[4], '-'],
            ["skmem_w", "wmem-queued", colors[5], '-']]:
        ax5.plot(time,
                 data[what[0]].astype(float),
                 what[3],
                 color=what[2],
                 label=what[1])
    ax5.plot(time,
             data["skmem_w"].astype(float) + data["skmem_f"].astype(float),
             ":", color=colors[4],
             label="f+w")
    ax5.plot(time,
             data["sendq"].astype(float), ":", linewidth=2,
             color=colors[5], label="Send-Q")

    ax5.set_ylabel("Size (bytes)", fontsize=9)
    ax5.set_ylim(bottom=0)
    ax5.legend(loc='best', fancybox=True, shadow=True,
               prop=dict(size=7), ncol=2, framealpha=0.8)

    mp.savefig(target)

if __name__ == "__main__":
    options = parse()
    setup_logging(options.debug, options.silent)
    try:
        if options.command == "run":
            run(options)
        elif options.command == "graph":
            graph(options)
    except Exception as e:
        logger.exception("Uncaught exception: %s", e)
