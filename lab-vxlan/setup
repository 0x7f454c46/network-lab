#!/bin/sh

LABNAME="vxlan"

# Choose one variant:
#VARIANT=multicast
#VARIANT=unicast-static-default
#VARIANT=unicast-static-l2
#VARIANT=unicast-static-nd
#VARIANT=unicast-static-rsc
#VARIANT=unicast-dynamic-l2
#VARIANT=unicast-dynamic-nd
#VARIANT=unicast-routing
#VARIANT=cumulus-vxfld-her     # Head end replication
#VARIANT=cumulus-vxfld-snr     # Service node replication
#VARIANT=bgp-evpn-cumulus+rr:gobgp
#VARIANT=bgp-evpn-cumulus+vmx+rr:gobgp
VARIANT=bgp-evpn-cumulus+vqfx+rr:gobgp
#VARIANT=bgp-evpn-cumulus+rr:quagga
#VARIANT=bgp-evpn-cumulus+rr:junos
#VARIANT=bgp-evpn-cumulus+junos+rr:junos

# Restrict learning capacity of the local bridge on each
# hypervisor. Comment out to get a regular bridge.
RESTRICTED_BRIDGE=1

cd "$(dirname "$(readlink -f "$0")")"
. ../common/lab-setup

SWITCH_MON=1

spawn vm H1 network 2
spawn vm H2 network 3
spawn vm H3 network 4
spawn vm H4 network 5

# Network 1 is the underlay network. We consider it as a routed L3
# network, but we lie a bit.
spawn vm S1 networks 1,2
spawn vm S2 networks 1,3,4
case $VARIANT in
    bgp-evpn-cumulus+vmx+rr:*)
        spawn juniper-vmx S3 networks 1,5
        ;;
    bgp-evpn-cumulus+vqfx+rr:*)
        spawn juniper-vqfx S4 networks 1,5
        ;;
    *)
        spawn vm S3 networks 1,5
        ;;
esac

case $VARIANT in
    bgp-evpn*+rr:gobgp) spawn vm RR network 1 ;;
    bgp-evpn*+rr:quagga) spawn vm RR network 1 ;;
    bgp-evpn*+rr:junos) spawn juniper-vrr RR network 1 ;;
    cumulus-vxfld-*)
        spawn vm SN1 network 1
        spawn vm SN2 network 1
        ;;
esac

run

noip() {
    # Linux have IP enabled on all interfaces and it cannot be
    # disabled for IPv4. Let's use iptables when we want to disable IP
    # processing on an interface. ARP requests will still be
    # processed. Don't try to be too smart, the goal is just to avoid
    # the switches to answer to some multicast traffic.
    #
    # We don't want to completely disable IP processing on VXLAN
    # interfaces since proxying needs it. So, no net/ipv6/conf/$1/disable_ipv6=1.
    iptables -I INPUT -i $1 -j DROP
    ip6tables -I INPUT -i $1 -j DROP
}

# Executed on each VM
case $uts in
    H*)
        ip link add name vlan100 link eth0 type vlan id 100
        ip link add name vlan200 link eth0 type vlan id 200
        ip link set up dev vlan100
        ip link set up dev vlan200
        # With the unicast-static-rsc variant, we want to "route"
        # traffic directly between two subnets by using switching. We
        # put H1 and H4 on different subnets. They should use some
        # router which doesn't exist.
        case $uts,$VARIANT in
            H1,unicast-static-rsc)
                ip -6 addr add 2001:db8:ff::10/64 dev vlan100
                ip -6 route add default via 2001:db8:ff::1
                ip -6 neigh add 2001:db8:ff::1 lladdr 02:00:00:00:00:01 dev vlan100 # doesn't exist
                ;;
            H4,unicast-static-rsc)
                ip -6 addr add 2001:db8:fe::13/64 dev vlan100
                ip -6 route add default via 2001:db8:fe::1
                ip -6 neigh add 2001:db8:fe::1 lladdr 02:00:00:00:00:02 dev vlan100 # doesn't exist
                ;;
            *,*)
                ip addr add 192.0.2.$(( ${uts#H} + 9 ))/25 dev vlan100
                ip addr add 192.0.2.$(( ${uts#H} + 129 ))/25 dev vlan200
                ip -6 addr add 2001:db8:ff::$(( ${uts#H} + 9 ))/64 dev vlan100
                ip -6 addr add 2001:db8:ef::$(( ${uts#H} + 9 ))/64 dev vlan200
                ;;
        esac
        service nginx
        ;;
    SN*)
        # Service nodes (for vflxd)
        ip addr add 203.0.113.$((97+${uts#SN}))/32 dev dummy0
        ip addr add 203.0.113.100/32 dev dummy0
        ip addr add 169.254.15.$((97+${uts#SN}))/24 dev eth0
        ip -6 addr add 2001:db8:$((97+${uts#SN}))::1/128 dev dummy0
        service bird

        case $uts in
            SN1) peer=203.0.113.99 ;;
            SN2) peer=203.0.113.98 ;;
        esac

        cat <<EOF > /tmp/vxsnd.conf
[vxsnd]
svcnode_peers = $peer

[common]
svcnode_ip = 203.0.113.100
src_ip = 203.0.113.$((97+${uts#SN}))
EOF
        log_begin_msg "Start vxsnd"
        vxsnd -d -c /tmp/vxsnd.conf -D &
        sleep 1
        log_ok_msg "vxsnd started"
        ;;
    RR)
        ip addr add 203.0.113.254/32 dev dummy0
        ip addr add 169.254.15.254/24 dev eth0
        ip -6 addr add 2001:db8:254::1/128 dev dummy0
        service bird
        case $VARIANT in
            *+rr:quagga)
                bgpd_args="--no_kernel" service quagga
                ;;
            *+rr:gobgp)
                log_begin_msg "Start gobgpd"
                gobgpd -t yaml -f /mnt/lab/gobgpd.yaml \
                       --syslog yes --disable-stdlog &
                sleep 1
                log_ok_msg "gobgpd started"
                ;;
        esac
        ;;
    S*)
        # Setup the "routed" underlay network
        # On lo, an IPv6 loopback address would be marked as
        # "unreachable" (and not considered by BIRD). Therefore, we put it on dummy0.
        ip addr add 203.0.113.${uts#S}/32 dev dummy0
        ip addr add 169.254.15.${uts#S}/24 dev eth0
        ip -6 addr add 2001:db8:${uts#S}::1/128 dev dummy0
        service bird

        for iface in /sys/class/net/eth*; do
            [ -d $iface ] || continue
            iface=${iface##*/}
            case $iface in
                eth0) ;;
                *)
                    ip link add name $iface.100 link $iface type vlan id 100
                    ip link set up dev $iface.100
                    [ $uts,$iface = S2,eth2 ] || {
                        # We make an exception to ensure we don't mix FDB entries between VLAN
                        ip link add name $iface.200 link $iface type vlan id 200
                        ip link set up dev $iface.200
                    }
                    ;;
            esac
        done
        [ $VARIANT = unicast-routing ] || {
            for v in 100 200; do
                brctl addbr br$v
                brctl setfd br$v 0
                brctl stp br$v off
                bridge vlan del dev br$v vid 1 self
                noip br$v
            done
            for iface in /sys/class/net/eth*; do
                [ -d $iface ] || continue
                iface=${iface##*/}
                case $iface in
                    *.*) ;;
                    eth0) ;;
                    *)
                        brctl addif br100 $iface.100
                        bridge vlan del dev $iface.100 vid 1
                        [ -z "$RESTRICTED_BRIDGE" ] || {
                            bridge link set dev $iface.100 learning off flood off
                            case $uts,$iface in
                                S1,eth1) bridge fdb add 50:54:33:00:00:01 dev $iface.100 static master ;;
                                S2,eth1) bridge fdb add 50:54:33:00:00:02 dev $iface.100 static master ;;
                                S2,eth2) bridge fdb add 50:54:33:00:00:03 dev $iface.100 static master ;;
                                S3,eth1) bridge fdb add 50:54:33:00:00:04 dev $iface.100 static master ;;
                            esac
                        }
                        [ $uts,$iface = S2,eth2 ] || {
                            brctl addif br200 $iface.200
                            bridge vlan del dev $iface.200 vid 1
                        }
                        noip $iface
                        noip $iface.100
                        noip $iface.200
                        ;;
                esac
            done
        }

        case $VARIANT in
            multicast)
                # VXLAN configuration using multicast
                ip -6 link add vxlan100 type vxlan \
                   dstport 4789 \
                   id 100 \
                   ttl 5 \
                   group ff05::100 \
                   dev eth0 \
                   local 2001:db8:${uts#S}::1
                ;;
            unicast-static-default)
                # VXLAN configuration using unicast flooding.
                ip -6 link add vxlan100 type vxlan \
                   dstport 4789 \
                   id 100 \
                   ttl 5 \
                   local 2001:db8:${uts#S}::1
                ;;
            unicast-static-l2)
                # Same as previously, but we disable learning as we
                # don't expect any additional entries (this could
                # protect us from some exhaustion attack).
                ip -6 link add vxlan100 type vxlan \
                   dstport 4789 \
                   id 100 \
                   ttl 5 \
                   local 2001:db8:${uts#S}::1 \
                   nolearning
                ;;
            unicast-static-nd)
                # Same as previously, but we enable proxy mode to reduce ARP/ND traffic.
                ip -6 link add vxlan100 type vxlan \
                   dstport 4789 \
                   id 100 \
                   ttl 5 \
                   local 2001:db8:${uts#S}::1 \
                   nolearning \
                   proxy

                # Static neighbor entries to reduce neighbors discovery.
                [ ${uts#S} = 1 ] || ip -6 neigh add 2001:db8:ff::10 lladdr 50:54:33:00:00:01 dev vxlan100
                [ ${uts#S} = 2 ] || ip -6 neigh add 2001:db8:ff::11 lladdr 50:54:33:00:00:02 dev vxlan100
                [ ${uts#S} = 2 ] || ip -6 neigh add 2001:db8:ff::12 lladdr 50:54:33:00:00:03 dev vxlan100
                [ ${uts#S} = 3 ] || ip -6 neigh add 2001:db8:ff::13 lladdr 50:54:33:00:00:04 dev vxlan100
                ;;
            unicast-static-rsc)
                # Same as unicast-static-default but we use a route
                # short circuit to let H1 and H4 communicate despite
                # the absence of router (so, for H1/H4, the setup is
                # more similar to unicast-static-nd).
                ip -6 link add vxlan100 type vxlan \
                   dstport 4789 \
                   id 100 \
                   ttl 5 \
                   local 2001:db8:${uts#S}::1 \
                   rsc

                [ ${uts#S} != 1 ] || bridge fdb append 02:00:00:00:00:01 dev vxlan100 dst 2001:db8:10::1 router
                [ ${uts#S} != 3 ] || bridge fdb append 02:00:00:00:00:02 dev vxlan100 dst 2001:db8:10::1 router
                [ ${uts#S} != 1 ] || ip -6 neigh add 2001:db8:fe::13 lladdr 50:54:33:00:00:0b dev vxlan100
                [ ${uts#S} != 3 ] || ip -6 neigh add 2001:db8:ff::10 lladdr 50:54:33:00:00:08 dev vxlan100
                ;;
            unicast-dynamic-l2)
                # No default FDB rules but uses a simplistic custom
                # controller to register entries when they are needed.
                ip -6 link add vxlan100 type vxlan \
                   dstport 4789 \
                   id 100 \
                   ttl 5 \
                   local 2001:db8:${uts#S}::1 \
                   nolearning \
                   l2miss

                # We still need ARP/ND to work. We register (broadcast
                # and) multicast addresses. That's quite a limitation
                # of this solution.
                [ ${uts#S} = 1 ] || bridge fdb append 33:33:FF:00:00:10 dev vxlan100 dst 2001:db8:1::1
                [ ${uts#S} = 2 ] || bridge fdb append 33:33:FF:00:00:11 dev vxlan100 dst 2001:db8:2::1
                [ ${uts#S} = 2 ] || bridge fdb append 33:33:FF:00:00:12 dev vxlan100 dst 2001:db8:2::1
                [ ${uts#S} = 3 ] || bridge fdb append 33:33:FF:00:00:13 dev vxlan100 dst 2001:db8:3::1

                # Now, ip monitor will display stuff like this:
                #     miss lladdr 50:54:33:00:00:08 STALE
                # Then, we have to add the entry (with bridge fdb).

                # As a PoC, we use a shell script for this purpose,
                # but of course, this should be done by something more
                # robust.
                (
                    ip monitor neigh dev vxlan100 | while read miss lladdr mac remaining; do
                        case $miss,$lladdr in
                            miss,lladdr) ;;
                            *) continue
                        esac
                        # The list of entries is hard-coded in the
                        # script. You should use a registry instead or
                        # some way to let VTEP share their local FDB
                        # with their peers.
                        case $mac in
                            50:54:33:00:00:01) dst=2001:db8:1::1 ;;
                            50:54:33:00:00:02) dst=2001:db8:2::1 ;;
                            50:54:33:00:00:03) dst=2001:db8:2::1 ;;
                            50:54:33:00:00:04) dst=2001:db8:3::1 ;;
                            *) continue ;;
                        esac
                        bridge fdb replace $mac dev vxlan100 dst $dst dynamic
                    done
                ) &
                ;;
            unicast-dynamic-nd)
                # Combine the previous example but also add dynamic ARP/ND entries
                ip -6 link add vxlan100 type vxlan \
                   dstport 4789 \
                   id 100 \
                   ttl 5 \
                   local 2001:db8:${uts#S}::1 \
                   nolearning \
                   l2miss \
                   l3miss \
                   proxy

                # Same kind of script than previously. But we can get:
                #     miss lladdr 50:54:33:00:00:08 STALE
                #     miss 2001:db8:ff::12 STALE
                #     2001:db8:ff::10 lladdr 50:54:33:00:00:08 STALE
                (
                    ip monitor neigh dev vxlan100 | while read x y z w; do
                        case $x,$y,$z,$w in
                            miss,lladdr,*,STALE)
                                mac=$z
                                case $mac in
                                    50:54:33:00:00:01) dst=2001:db8:1::1 ;;
                                    50:54:33:00:00:02) dst=2001:db8:2::1 ;;
                                    50:54:33:00:00:03) dst=2001:db8:2::1 ;;
                                    50:54:33:00:00:04) dst=2001:db8:3::1 ;;
                                    *) continue ;;
                                esac
                                bridge fdb replace $mac dev vxlan100 dst $dst dynamic
                                ;;
                            miss,*,STALE,)
                                addr=$y
                                case $addr in
                                    2001:db8:ff::10) dst=50:54:33:00:00:01 ;;
                                    2001:db8:ff::11) dst=50:54:33:00:00:02 ;;
                                    2001:db8:ff::12) dst=50:54:33:00:00:03 ;;
                                    2001:db8:ff::13) dst=50:54:33:00:00:04 ;;
                                    *) continue ;;
                                esac
                                ip -6 neigh replace $addr lladdr $dst dev vxlan100 nud reachable
                                ;;
                            *,lladdr,*,STALE)
                                addr=$x
                                case $addr in
                                    2001:db8:ff::10) dst=50:54:33:00:00:01 ;;
                                    2001:db8:ff::11) dst=50:54:33:00:00:02 ;;
                                    2001:db8:ff::12) dst=50:54:33:00:00:03 ;;
                                    2001:db8:ff::13) dst=50:54:33:00:00:04 ;;
                                    *) continue ;;
                                esac
                                ip -6 neigh replace $addr lladdr $dst dev vxlan100 nud reachable
                                ;;
                            *) continue
                        esac
                    done
                ) &
                ;;
            unicast-routing)
                # This is a quite different setup. VXLAN is just used
                # for encapsulation. For some reason, checksums are
                # not computed. Disable them as we rely on the inner
                # IP checksum.
                ip -6 link add vxlan100 \
                   address 02:00:00:00:00:0${uts#S} \
                   type vxlan \
                   dstport 4789 \
                   ttl 5 \
                   local 2001:db8:${uts#S}::1 \
                   nolearning \
                   external \
                   udp6zerocsumtx \
                   udp6zerocsumrx
                # We enable routing
                sysctl -qw net.ipv6.conf.all.forwarding=1
                # Routes to remote hosts. This should be distributed by some IGP (BGP for example)
                [ ${uts#S} = 1 ] || ip -6 route add 2001:db8:ff::10/128 encap ip6 id 100 dst 2001:db8:1::1 dev vxlan100
                [ ${uts#S} = 2 ] || ip -6 route add 2001:db8:ff::11/128 encap ip6 id 100 dst 2001:db8:2::1 dev vxlan100
                [ ${uts#S} = 2 ] || ip -6 route add 2001:db8:ff::12/128 encap ip6 id 100 dst 2001:db8:2::1 dev vxlan100
                [ ${uts#S} = 3 ] || ip -6 route add 2001:db8:ff::13/128 encap ip6 id 100 dst 2001:db8:3::1 dev vxlan100
                # Routes to local hosts.
                [ ${uts#S} != 1 ] || ip -6 route add 2001:db8:ff::10/128 dev eth1.100
                [ ${uts#S} != 2 ] || ip -6 route add 2001:db8:ff::11/128 dev eth1.100
                [ ${uts#S} != 2 ] || ip -6 route add 2001:db8:ff::12/128 dev eth2.100
                [ ${uts#S} != 3 ] || ip -6 route add 2001:db8:ff::13/128 dev eth1.100
                # ND proxying for remote hosts (should use somethig like ndppd, more flexible)
                for p in /proc/sys/net/ipv6/conf/eth*.100/proxy_ndp; do
                    iface=${p%/*}
                    iface=${iface##*/}
                    sysctl -qw net/ipv6/conf/$iface/proxy_ndp=1
                    [ ${uts#S} = 1 ] || ip -6 neigh add proxy 2001:db8:ff::10 dev $iface
                    [ ${uts#S} = 2 ] || ip -6 neigh add proxy 2001:db8:ff::11 dev $iface
                    [ ${uts#S} = 2 ] || ip -6 neigh add proxy 2001:db8:ff::12 dev $iface
                    [ ${uts#S} = 3 ] || ip -6 neigh add proxy 2001:db8:ff::13 dev $iface
                done
                # Static ND entries. We would want to use "ip link set
                # arp off", but on the remote, the vxlan driver is
                # still checking the MAC address and the IP layer will
                # drop the packet if the MAC is not its own.
                [ ${uts#S} = 1 ] || ip -6 neigh add 2001:db8:ff::10 lladdr 02:00:00:00:00:01 dev vxlan100
                [ ${uts#S} = 2 ] || ip -6 neigh add 2001:db8:ff::11 lladdr 02:00:00:00:00:02 dev vxlan100
                [ ${uts#S} = 2 ] || ip -6 neigh add 2001:db8:ff::12 lladdr 02:00:00:00:00:02 dev vxlan100
                [ ${uts#S} = 3 ] || ip -6 neigh add 2001:db8:ff::13 lladdr 02:00:00:00:00:03 dev vxlan100
                ;;
            cumulus-vxfld-*)
                # Use of Cumulus vxfld
                case $VARIANT in
                    *-her)
                        # Head end replication (like unicast-static-default)
                        headrep=true
                        for vlan in 100 200; do
                            ip link add vxlan$vlan \
                               type vxlan \
                               dstport 4789 \
                               id $vlan \
                               ttl 5 \
                               local 203.0.113.${uts#S}
                        done
                        ;;
                    *-snr)
                        # Service node replication (flooding done by SN* nodes)
                        headrep=false
                        for vlan in 100 200; do
                            ip link add vxlan$vlan \
                               type vxlan \
                               dstport 4789 \
                               id $vlan \
                               ttl 5 \
                               local 203.0.113.${uts#S} \
                               remote 203.0.113.100
                        done
                        ;;
                esac
                cat <<EOF > /tmp/vxrd.conf
[vxrd]
head_rep = $headrep

[common]
svcnode_ip = 203.0.113.100
src_ip = 203.0.113.${uts#S}
EOF
                log_begin_msg "Start vxrd"
                vxrd -d -c /tmp/vxrd.conf -D &
                sleep 1
                log_ok_msg "vxrd started"
                ;;
            bgp-evpn-cumulus*)
                # Use of BGP EVPN. Learning is disabled. Not compatible with IPv6.
                for vlan in 100 200; do
                    ip link add vxlan$vlan \
                       type vxlan \
                       dstport 4789 \
                       id $vlan \
                       ttl 5 \
                       local 203.0.113.${uts#S} \
                       nolearning
                done
                service quagga
                ;;
        esac
        case $VARIANT in
            unicast-static-default|unicast-static-l2|unicast-static-rsc)
                # Any BUM frame will be sent to the other hosts. We
                # need that even for static L2 as we will have
                # broadcast/multicast frames for neighbors discovery
                # (ARP/ND). Not strictly needed for unicast static L3
                # case (but no broadcast will be possible then).
                [ ${uts#S} = 1 ] || bridge fdb append 00:00:00:00:00:00 dev vxlan100 dst 2001:db8:1::1
                [ ${uts#S} = 2 ] || bridge fdb append 00:00:00:00:00:00 dev vxlan100 dst 2001:db8:2::1
                [ ${uts#S} = 3 ] || bridge fdb append 00:00:00:00:00:00 dev vxlan100 dst 2001:db8:3::1
        esac
        case $VARIANT in
            unicast-static-l2|unicast-static-nd)
                # We put static entries for known mac.
                [ ${uts#S} = 1 ] || bridge fdb append 50:54:33:00:00:01 dev vxlan100 dst 2001:db8:1::1
                [ ${uts#S} = 2 ] || bridge fdb append 50:54:33:00:00:02 dev vxlan100 dst 2001:db8:2::1
                [ ${uts#S} = 2 ] || bridge fdb append 50:54:33:00:00:03 dev vxlan100 dst 2001:db8:2::1
                [ ${uts#S} = 3 ] || bridge fdb append 50:54:33:00:00:04 dev vxlan100 dst 2001:db8:3::1
                ;;
        esac

        [ $VARIANT = unicast-routing ] || {
            noip vxlan100
            brctl addif br100 vxlan100
            bridge vlan del dev vxlan100 vid 1
            [ -z "$RESTRICTED_BRIDGE" ] || {
                bridge link set dev vxlan100 \
                       learning off \
                       flood on
            }
            ip link set up dev br100
        }
        ip link set up dev vxlan100
        [ ! -d /sys/class/net/vxlan200 ] || {
            noip vxlan200
            brctl addif br200 vxlan200
            bridge vlan del dev vxlan200 vid 1
            ip link set up dev br200
            ip link set up dev vxlan200
        }
        ;;
esac
