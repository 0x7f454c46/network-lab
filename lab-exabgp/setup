#!/bin/sh

LABNAME="exabgp"
PROGNAME=$(readlink -f $0)
PROGARGS="$@"

ROOT=$(readlink -f ${ROOT:-/})
LINUX=$(readlink -f ${LINUX:-./linux})
[ ! -x ~/code/dailymotion/exabgp/sbin/exabgp ] || \
    EXABGP=~/code/dailymotion/exabgp/sbin/exabgp
EXABGP=${EXABGP:-exabgp}

WHICH=$(which which)
DEPS="tmux vde_switch start-stop-daemon kvm slirpvde"
CHROOTDEPS="ip bird6 nginx vtysh ${EXABGP}"

renice 10 -p $$ 2>/dev/null

info() {
    echo "[1;34m[+] $@[0m"
}

error() {
    echo "[1;31m[+] $@[0m"
}

# Setup a TMP directory
setup_tmp() {
    TMP=$(mktemp -d)
    trap "rm -rf $TMP" EXIT
    info "TMP is $TMP"
}

# Check for dependencies needed by this tool
check_dependencies() {
    for dep in $DEPS; do
        $WHICH $dep 2> /dev/null > /dev/null || {
            error "Missing dependency: $dep"
            exit 1
        }
    done
    [ -d $ROOT ] || {
        error "Chroot $ROOT does not exists"
    }
    for dep in $CHROOTDEPS; do
        PATH=$ROOT/usr/local/bin:$ROOT/usr/bin:$ROOT/bin:$ROOT/sbin:$ROOT/usr/local/sbin:$ROOT/usr/sbin \
            $WHICH $dep 2> /dev/null > /dev/null || {
            error "Missing dependency: $dep (in $ROOT)"
            exit 1
        }
    done
}

# Run our lab in tmux
setup_screen() {
    if [ -z "$TMUX" ] || [ x"$(tmux list-panes -F '#{session_name}')" != x"$LABNAME" ]; then
        unset TMUX
        exec tmux new-session -s "$LABNAME" -n main "$PROGNAME $PROGARGS"
    fi
    sleep 1
    tmux set-option prefix C-b
    tmux set-option set-remain-on-exit
    tmux bind-key r respawn-window
}

# Setup a VDE switch
setup_switch() {
    info "Setup switch $1"
    start-stop-daemon -b --no-close --make-pidfile --pidfile "$TMP/switch-$1.pid" \
        --start --startas $($WHICH vde_switch) -- \
        --sock "$TMP/switch-$1.sock"
}

# Start a VM
start_vm() {
    info "Start VM $1"
    name="$1"
    shift

    netargs=""
    saveifs="$IFS"
    IFS=,
    for net in $NET; do
        mac=$(echo $name-$net | sha1sum | \
            awk '{print "52:54:" substr($1,0,2) ":" substr($1, 2, 2) ":" substr($1, 4, 2) ":" substr($1, 6, 2)}')
        netargs="$netargs -net nic,model=virtio,macaddr=$mac,vlan=$net"
        netargs="$netargs -net vde,sock=$TMP/switch-$net.sock,vlan=$net"
    done
    IFS="$saveifs"

    # /root is mounted with version 9p2000.u to allow access to /dev,
    # /sys and to mount new partitions over them. This is not the case
    # for 9p2000.L.
    cat <<EOF > "$TMP/vm-$name.exec"
#!/bin/sh
        exec start-stop-daemon --make-pidfile --pidfile "$TMP/vm-$name.pid" \
        --start --startas $($WHICH kvm) -- \
        -nodefconfig -no-user-config -nodefaults \
        -m 128m \
        -display none \
        \
        -chardev stdio,id=charserial0,signal=off \
        -device isa-serial,chardev=charserial0,id=serial0 \
        -chardev socket,id=charserial1,path=$TMP/vm-$name-serial.pipe,server,nowait \
        -device isa-serial,chardev=charserial1,id=serial1 \
        \
        -chardev socket,id=con0,path=$TMP/vm-$name-console.pipe,server,nowait \
        -mon chardev=con0,mode=readline,default \
        \
        -fsdev local,security_model=passthrough,id=fsdev-root,path=${ROOT},readonly \
        -device virtio-9p-pci,id=fs-root,fsdev=fsdev-root,mount_tag=/dev/root \
        -fsdev local,security_model=none,id=fsdev-home,path=${HOME} \
        -device virtio-9p-pci,id=fs-home,fsdev=fsdev-home,mount_tag=homeshare \
        -fsdev local,security_model=none,id=fsdev-lab,path=$(dirname "$PROGNAME") \
        -device virtio-9p-pci,id=fs-lab,fsdev=fsdev-lab,mount_tag=labshare \
        \
        -gdb unix:$TMP/vm-$name-gdb.pipe,server,nowait \
        -kernel $LINUX \
        -append "init=$PROGNAME console=ttyS0 uts=$name root=/dev/root rootflags=trans=virtio,version=9p2000.u ro rootfstype=9p" \
        $netargs \
        $@
EOF
    chmod +x "$TMP/vm-$name.exec"
    tmux new-window -n $name "$TMP/vm-$name.exec"
    echo "GDB server listening on.... $TMP/vm-$name-gdb.pipe"
    echo "monitor listening on....... $TMP/vm-$name-console.pipe"
    echo "ttyS1 listening on......... $TMP/vm-$name-serial.pipe"
    tmux select-window -t 1
}

display_help() {
    cat <<EOF

Some tmux commands (assuming default keybindings) :
 C-b d     - Detach the lab (resume with "tmux attach -t $LABNAME")
 C-b w     - Select a window
 C-b n     - Next window
 C-b p     - Previous window
 C-b l     - Last window
 C-b ?     - Get help
EOF
    echo "Press enter to exit the lab"
    read a
}

cleanup() {
    for pid in $TMP/*.pid; do
        kill -15 -$(cat $pid) 2> /dev/null || true
    done
    sleep 1
    for pid in $TMP/*.pid; do
        kill -9 -$(cat $pid) 2> /dev/null || true
    done
    rm -rf $TMP # sh does not seem to handle "trap EXIT"
    tmux kill-session -t $LABNAME
}

start_quagga() {
    [ -d /lab/$uts/quagga ] || return
    export VTYSH_PAGER=/bin/cat
    [ -d /var/log/quagga ] || mkdir /var/log/quagga
    [ -d /var/run/quagga ] || mkdir /var/run/quagga
    chown root:root /var/run/quagga
    for daemon in $(ls /usr/lib/quagga); do
        for conf in /lab/$uts/quagga/$daemon.conf /lab/quagga/$daemon.conf; do
            [ -f $conf ] || continue
            info "Running Quagga $daemon"
            /usr/lib/quagga/$daemon -d -u root -g root -f $conf \
                $(cat ${conf%/*}/$daemon.options 2> /dev/null || true)
            break
        done
    done
}
start_bird() {
    [ -e /lab/bird6.$uts.conf ] || return
    info "Running bird6"
    bird6 -c /lab/bird6.$uts.conf
}
start_nginx() {
    info "Running nginx"
    mkdir /var/log/nginx
    mkdir /usr/share/nginx/www
    echo $uts > /usr/share/nginx/www/index.html
    nginx -c /lab/nginx.conf
}
start_exabgp() {
    info "Running exabgp"
    # We need a recent enough version of exabgp which works correctly with IPv6
    ${EXABGP} -e /lab/exabgp.env /lab/exabgp.$uts.conf &
}

export STATE=${STATE:-0}
case $$,$STATE in
    1,0)
        # Initrd
        info "Setup hostname"
        hostname ${uts}
        info "Set path"
        export TERM=screen
        export PATH=/usr/local/bin:/usr/bin:/bin:/sbin:/usr/local/sbin:/usr/sbin
        export HOME=/root

        info "Setup overlayfs"
        mount -t tmpfs tmpfs /tmp -o rw
        mkdir /tmp/target
        mkdir /tmp/target/rw
        mkdir /tmp/target/overlay
        mount -t tmpfs     tmpfs     /tmp/target/rw      -o rw
        mount -t overlayfs overlayfs /tmp/target/overlay -o lowerdir=/,upperdir=/tmp/target/rw
        mount -n -t proc  proc /tmp/target/overlay/proc
        mount -n -t sysfs sys  /tmp/target/overlay/sys

        info "Mount home directory on /root"
        mount -t 9p homeshare /tmp/target/overlay/root -o trans=virtio,version=9p2000.L,access=0,rw

        info "Mount lab directory on /lab"
        mkdir /tmp/target/overlay/lab
        mount -t 9p labshare /tmp/target/overlay/lab -o trans=virtio,version=9p2000.L,access=0,rw

        info "Chroot"
        export STATE=1
        cp "$PROGNAME" /tmp/target/overlay
        exec chroot /tmp/target/overlay "$PROGNAME"
        ;;
    1,1)
        # In chroot
        info "Clean out /tmp and /run directories"
        for fs in /run /var/run /var/tmp /var/log /tmp; do
            mount -t tmpfs tmpfs $fs -o rw,nosuid,nodev
        done

        info "Start udev"
        /etc/init.d/udev start

        info "Setup interfaces"
        for intf in /sys/class/net/*; do
            intf=$(basename $intf)
            ip a l dev $intf 2> /dev/null >/dev/null || continue
            case $intf in
                lo|eth*|dummy*)
                    ip link set up dev $intf
                    ;;
            esac
        done

        info "Start syslog"
        rsyslogd

        info "Setup terminal"
        export STATE=2
        exec setsid /sbin/getty -L ttyS0 -a root -l "$PROGNAME" -i 115200
        ;;
    1,2)
        export TERM=screen

        info "Lab specific setup"
        export STATE=3
        . "$PROGNAME"

        info "Setup additional commands"
        rm -f /sbin/reboot
        cat <<EOF > /sbin/reboot
#!/bin/sh
echo b > /proc/sysrq-trigger
EOF

        while true; do
            info "Spawning a shell"
            cd $HOME
            export SSH_TTY=$(tty)
            if [ -f $HOME/.zshrc ]; then
                /bin/zsh -i
            else
                /bin/bash -i
            fi || sleep 1
        done
        ;;
    *,3)
        # Specific setup for this lab
        case $uts in
            rs*)
                info "No forwarding for this host"
                ;;
            *)
                info "Enable forwarding"
                sysctl -w net.ipv6.conf.all.forwarding=1
        esac

        info "Setup IP addresses"
        case $uts in
            r1)
                ip -6 addr add 2001:db8:1000::1/120 dev eth0
                ip -6 addr add 2001:db8:2000::1/64 dev dummy0
                ;;
            er*)
                nb=${uts#er}
                ip -6 addr add 2001:db8:1000::${nb}/120 dev eth0
                ip -6 addr add 2001:db8:1::${nb}/64 dev eth1
                ;;
            rs4)
                ip -6 addr add 2001:db8:1::4/64 dev eth0
                ;;
            rs5)
                ip -6 addr add 2001:db8:8::5/64 dev eth0
                ip -6 route add default via 2001:db8:8::8 dev eth0
                ;;
            dr*)
                nb=${uts#dr}
                ip -6 addr add 2001:db8:1::${nb}/64 dev eth0
                ip -6 addr add 2001:db8:${nb}::${nb}/64 dev eth1
                ;;
            w*)
                nb=${uts#w}
                ip -6 addr add 2001:db8:30::1/128 dev lo
                ip -6 addr add 2001:db8:30::2/128 dev lo
                ip -6 addr add 2001:db8:30::3/128 dev lo
                ip -6 addr add 2001:db8:$((${nb}+5))::1${nb}/64 dev eth0
                ip -6 route add default via 2001:db8:$((${nb}+5))::$((${nb}+5))
                start_nginx
                start_exabgp
                ;;
        esac
        start_bird
        start_quagga
        ;;
    *,*)
        [ $(id -u) != 0 ] || {
            error "You should not run this as root"
            exit 1
        }
        check_dependencies
        setup_screen
        setup_tmp

        setup_switch   1
        setup_switch   6
        setup_switch   7
        setup_switch   8
        setup_switch   1000
        sleep 0.3
        NET=1000 start_vm r1
        NET=1000,1 start_vm er2
        NET=1000,1 start_vm er3
        NET=1 start_vm rs4
        NET=8 start_vm rs5
        NET=1,6 start_vm dr6
        NET=1,7 start_vm dr7
        NET=1,8 start_vm dr8
        NET=6 start_vm w1
        NET=7 start_vm w2
        NET=8 start_vm w3

        display_help
        cleanup
        ;;
esac

# Local Variables:
# mode: sh
# indent-tabs-mode: nil
# sh-basic-offset: 4
# End:
