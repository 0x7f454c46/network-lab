#!/bin/sh

LABNAME="anycast-dns"
# Change ROOT to the directory containing a chrooted system if you
# don't want to use your own system as a reference
ROOT=$(readlink -f ${ROOT:-/})
DEPS="screen vde_switch linux start-stop-daemon"
CHROOTDEPS="ip zsh mount.aufs bird6 nsd"
PROGNAME=$(readlink -f $0)
PROGARGS="$@"

# Check for dependencies needed by this tool
check_dependencies() {
    WHICH=$(which which)
    for dep in $DEPS; do
        $WHICH $dep 2> /dev/null > /dev/null || {
            echo "[!] Missing dependency: $dep"
            exit 1
        }
    done
    [ -d $ROOT ] || {
        echo "[!] Chroot $ROOT does not exists"
    }
    for dep in $CHROOTDEPS; do
        PATH=$ROOT/usr/local/bin:$ROOT/usr/bin:$ROOT/bin:$ROOT/sbin:$ROOT/usr/local/sbin:$ROOT/usr/sbin $WHICH $dep 2> /dev/null > /dev/null || {
            echo "[!] Missing dependency: $dep (in $ROOT)"
            exit 1
        }
    done
    [ x"$ROOT" = x"/" ] || {
        [ -d $(dirname $ROOT/$PROGNAME) ] || mkdir -p $(dirname $ROOT/$PROGNAME)
        cp "$PROGNAME" "$ROOT/$PROGNAME"
    }
}

# Run our lab in screen
setup_screen() {
    [ x"$TERM" = x"screen" ] || \
        exec screen -ln -S $LABNAME -c /dev/null -t main "$PROGNAME" "$PROGARGS"
    sleep 1
    screen -X caption always "%{= wk}%-w%{= BW}%n %t%{-}%+w %-="
}

# Setup a VDE switch
setup_switch() {
    echo "[+] Setup switch $1"
    screen -t "switch-$1" \
        start-stop-daemon --make-pidfile --pidfile "$TMP/switch-$1.pid" \
        --start --startas $(which vde_switch) -- \
        --sock "$TMP/switch-$1.sock" -f $2
    screen -X select 0
}

# Start a VM
start_vm() {
    echo "[+] Start VM $1"
    name="$1"
    shift
    screen -t $name \
        start-stop-daemon --make-pidfile --pidfile "$TMP/vm-$name.pid" \
        --start --startas $(which linux) -- \
        uts=$name mem=64M \
        root=/dev/root rootfstype=hostfs rootflags=$ROOT init="$PROGNAME" \
        "$@"
    screen -X select 0
    sleep 0.3
}

display_help() {
    cat <<EOF

Some screen commands :
 C-a d     - Detach the screen (resume with screen -r $LABNAME)
 C-a "     - Select a window
 C-a space - Next window
 C-a C-a   - Previous window
EOF
    echo "Press enter to exit the lab"
    read a
}

cleanup() {
    for pid in $TMP/*.pid; do
        kill $(cat $pid)
    done
    rm -rf $TMP # sh does not seem to handle "trap EXIT"
}

bird() {
    echo "[+] Setup BIRD"
    rm -f /etc/bird.conf
    rm -f /etc/bird6.conf
    # We build bird configuration from /etc/hosts
    # Our IPs
    ips=$(awk "(\$2 ~ /^${uts}-/) {print \$1}" /etc/hosts)
    # Our AS (without leading 6)
    as=$(echo $ips | tr ' ' '\n' | \
        awk -F: '($3 == "ffff" && NF == 7) {if ($NF == "1") print $4; else print $5; exit}')
    # Our router ID
    routerid=$(echo $uts | md5sum | od -t u1 -N 4 -An | \
        sed -e 's/^ *//' -e 's/  */ /g' -e 's/ /./g')
    # Our networks
    networks=$(echo $ips | tr ' ' '\n' | \
        sed -n 's/^\(2001:db8:'$as'::\)1$/\1\/48/p')
    # Neighbors
    neighbors1=$(awk "(\$2 !~ /^${uts}-/) {print \$1}" /etc/hosts | \
        grep ':ffff:' | grep ":$as:")
    neighbors=""
    for neigh in $neighbors1; do
        if ! ip route get $neigh | grep -q ^unreachable; then
            neighbors="$neighbors $neigh"
        fi
    done
    # Summary
    cat <<EOF
8<--------------------------------------------------
IP addresses :
$(for ip in $ips; do \
    printf "%35s  -- %s\n" $ip \
    $(getent hosts $ip | awk '{print $2}') ; \
  done)
AS           : 6${as}
Router ID    : $routerid
Networks     : ${networks:-none}
Neighbors    :
$(for neigh in $neighbors; do \
    printf "%35s  -- %s\n" $neigh \
    $(getent hosts $neigh | awk '{print $2}') ; \
  done)
8<--------------------------------------------------
EOF
    # Configuration for bird
    cat <<EOF > /etc/bird6.conf
/* Autogenerated configuration by $PROGNAME */
log syslog { debug, trace, info, remote, warning, error, auth, fatal, bug };
router id $routerid;

protocol device {
   scan time 10;
}
protocol direct {
   description "Client networks";
   import filter {
     if net ~ [ 2001:db8:4600::/40{40,48} ] then accept;
     if net ~ [ 2001:db8:aaaa::/48 ] then accept;
     reject;
   };
   export none;
}
protocol kernel {
   persist;
   import none;
   export all;
}

filter keep_local_dns {
   if net ~ [ 2001:db8:aaaa::/48 ] then reject;
   accept;
}

EOF
    for neigh in $neighbors; do
        otheras=$(echo $neigh | \
            awk -F: '{if ($4 == '$as') print $5; else print $4}')
        cat <<EOF >> /etc/bird6.conf
protocol bgp {
   description "BGP with peer $(getent hosts $neigh | \
      awk '{print $2}' | sed 's/-.*//' )";
   local as 6$as;
   neighbor $neigh as 6$otheras;
   gateway direct;
   hold time 30;
   export $(case $as,$otheras in 4620,46[013]0) echo filter keep_local_dns ;; *) echo all ;; esac);
   import all;
}

EOF
    done
    /etc/init.d/bird6 restart
}

nsd3() {
    echo "[+] Setup NSD3"
    # Dunno why, but we can't delete /etc/nsd3
    mount -n -t tmpfs tmpfs /etc/nsd3
    ln -s $PWD/nsd.conf /etc/nsd3/.
    sed  s/@@UTS@@/${uts}/ \
        $PWD/example.com.zone > /etc/nsd3/example.com.zone
    /etc/init.d/nsd3 stop ; sleep 1 ; /etc/init.d/nsd3 start
}

# Exec function associated to first argument if provided
case $1 in
    ""|--)
        ;;
    *)
        $1
        exit 0
        ;;
esac

# No argument is given, setup the lab or act as init.
case $$ in
    1)
        # Inside UML. Three states:
        #   1. Setup the getty
        #   2. Setup AUFS
        #   3. Remaining setup
        STATE=${STATE:-1}

        case $STATE in
            1)
                echo "[+] Set hostname"
                hostname -b ${uts}
                echo "[+] Set path"
                export TERM=xterm
                export PATH=/usr/local/bin:/usr/bin:/bin:/sbin:/usr/local/sbin:/usr/sbin
                
                # Setup getty
                export STATE=2
                exec getty -n -l "$PROGNAME" 38400 /dev/tty0
                ;;
            2)
                echo "[+] Setup AUFS"
                mount -n -t proc proc /proc
                mount -n -t sysfs sysfs /sys
                mount -n -t hostfs hostfs /lib/modules -o /usr/lib/uml/modules,ro
                mount -n -t tmpfs tmpfs /tmp -o rw,nosuid,nodev
                mkdir /tmp/ro
                mkdir /tmp/rw
                mkdir /tmp/aufs
                mount -n -t hostfs hostfs /tmp/ro -o /,ro
                mount -n -t aufs aufs /tmp/aufs -o noxino,noatime,dirs=/tmp/rw:/tmp/ro=ro
                
                # Chroot inside our new root
                export STATE=3
                exec chroot /tmp/aufs "$PROGNAME"
                ;;
        esac

        echo "[+] Set filesystems"
        rm /etc/mtab
        mount -t proc proc /proc
        mount -t sysfs sysfs /sys
        mount -t tmpfs tmpfs /dev -o rw && {
            cd /dev
            if [ -f $(dirname "$PROGNAME")/dev.tar ]; then
                tar xf $(dirname "$PROGNAME")/dev.tar
            else
                MAKEDEV null
            fi
        }
        mount -o bind /usr/lib/uml/modules /lib/modules
        for fs in /var/run /var/tmp /var/log /tmp; do
            mount -t tmpfs tmpfs $fs -o rw,nosuid,nodev
        done
        mount -t hostfs hostfs $(dirname "$PROGNAME") -o $(dirname "$PROGNAME")
        
        # Interfaces
        echo "[+] Set interfaces"
        for intf in /sys/class/net/*; do
            intf=$(basename $intf)
            ip a l dev $intf 2> /dev/null >/dev/null && ip link set up dev $intf
        done
        
        echo "[+] Start syslog"
        rsyslogd
        
        cd $(dirname "$PROGNAME")
        [ -f dev.tar ] || {
            tar -C /dev -cf dev.tar.$uts . && mv dev.tar.$uts dev.tar
        }
        
        # Configure each UML
        echo "[+] Setup UML"
        modprobe ipv6
        
        # Configure IP.
        #  - 2001:db8:ffff:X:Y prefix is used for /126 interco. X and Y are AS numbers
        #  - 2001:db8:X::/48 is the network for router X
        echo "[+] Setup IPs"
        for ip in \
            NewYork-eth0-ffff:4600:4600:1::2/126 \
            NewYork-eth1-ffff:4600:4600:3::2/126 \
            NewYork-eth2-ffff:4600:4610::1/126 \
            NewYork-eth3-ffff:4600:4620::1/126 \
            NewYork-eth4-ffff:4600:4630::1/126 \
            Paris-eth0-ffff:4600:4600:1::1/126 \
            Paris-eth1-ffff:4600:4600:2::1/126 \
            Paris-eth2-ffff:4600:4650::1/126 \
            Tokyo-eth0-ffff:4600:4600:2::3/126 \
            Tokyo-eth1-ffff:4600:4600:3::3/126 \
            Tokyo-eth2-ffff:4600:4640::1/126 \
            64610-eth0-ffff:4600:4610::2/126 \
            64610-eth3-ffff:4610:4620::1/126 \
            64610-eth4-ffff:4610:4630::1/126 \
            64610-eth1-ffff:4610:4611::1/126 \
            64610-eth2-ffff:4610:4612::1/126 \
            64611-eth0-ffff:4610:4611::2/126 \
            64611-eth1-4611::1/48 \
            64612-eth0-ffff:4610:4612::2/126 \
            64612-eth1-4612::1/48 \
            64612-eth1-aaaa::1/48 \
            64620-eth0-ffff:4600:4620::2/126 \
            64620-eth3-ffff:4610:4620::2/126 \
            64620-eth4-ffff:4620:4630::1/126 \
            64620-eth1-ffff:4620:4621::1/126 \
            64620-eth2-ffff:4620:4622::1/126 \
            64621-eth0-ffff:4620:4621::2/126 \
            64621-eth1-4621::1/48 \
            64621-eth1-aaaa::1/48 \
            64622-eth0-ffff:4620:4622::2/126 \
            64622-eth1-4622::1/48 \
            64630-eth0-ffff:4600:4630::2/126 \
            64630-eth2-ffff:4610:4630::2/126 \
            64630-eth3-ffff:4620:4630::2/126 \
            64630-eth1-ffff:4630:4631::1/126 \
            64631-eth0-ffff:4630:4631::2/126 \
            64631-eth1-4631::1/48 \
            64640-eth0-ffff:4600:4640::2/126 \
            64640-eth1-ffff:4640:4641::1/126 \
            64641-eth0-ffff:4640:4641::2/126 \
            64641-eth1-4641::1/48 \
            64650-eth0-ffff:4600:4650::2/126 \
            64650-eth1-ffff:4650:4651::1/126 \
            64650-eth2-ffff:4650:4652::1/126 \
            64651-eth0-ffff:4650:4651::2/126 \
            64651-eth1-4651::1/48 \
            64651-eth1-aaaa::1/48 \
            64652-eth0-ffff:4650:4652::2/126 \
            64652-eth1-4652::1/48 \
            C1-eth0-4652::1001/48 \
            C2-eth0-4641::1002/48 \
            C3-eth0-4631::1003/48 \
            C4-eth0-4622::1004/48 \
            C5-eth0-4611::1005/48 \
            G1-eth0-4651::1:53/48 \
            G1-eth0-aaaa::53/48   \
            G2-eth0-4612::2:53/48 \
            G2-eth0-aaaa::53/48   \
            L1-eth0-4621::3:53/48 \
            L1-eth0-aaaa::53/48; do
                OLDIFS="$IFS" ; IFS="-"
                eval set -- $ip
                IFS="$OLDIFS"
                case "$1" in
                    C?|G?|L?)
                        echo 2001:db8:${3%/*} $1.lab >> /etc/hosts
                        ;;
                    *)
                        echo 2001:db8:${3%/*} $1-$2.lab >> /etc/hosts
                        ;;
                esac
                [ "$1" = "$uts" ] || continue
                ip addr add 2001:db8:$3 dev $2
        done

        # Only servers and clients need a default route
        echo "[+] Setup routes"
        for route in \
            C1-4652::1 \
            C2-4641::1 \
            C3-4631::1 \
            C4-4622::1 \
            C5-4611::1 \
            G1-4651::1 \
            G2-4612::1 \
            L1-4621::1; do
            OLDIFS="$IFS" ; IFS="-"
            eval set -- $route
            IFS="$OLDIFS"
            [ "$1" = "$uts" ] || continue
            ip route add default via 2001:db8:$2
        done

        # Start BIRD and nsd3
        case $uts in
            C?)
                # Clients don't need anything
                ;;
            L?|G?)
                nsd3
                ;;
            *)
                sysctl -w net.ipv6.conf.all.forwarding=1
                bird
                ;;
        esac
        
        echo "[+] Drop to a shell"
        exec /bin/zsh
        
        ;;
    *)
        TMP=$(mktemp -d)
        trap "rm -rf $TMP" EXIT
        check_dependencies
        setup_screen
        # Configure switch and VM
        port=1
        :> $TMP/switch.rc
        :> $TMP/vm.rc
        for vm in \
            Paris:eth0:1:eth1:2:eth2:50 \
            Tokyo:eth0:2:eth1:3:eth2:40 \
            NewYork:eth0:1:eth1:3:eth2:10:eth3:20:eth4:30 \
            64610:eth0:10:eth1:11:eth2:12:eth3:120:eth4:130 \
            64611:eth0:11:eth1:111 \
            64612:eth0:12:eth1:112 \
            64620:eth0:20:eth1:21:eth2:22:eth3:120:eth4:230 \
            64621:eth0:21:eth1:121 \
            64622:eth0:22:eth1:122 \
            64630:eth0:30:eth1:31:eth2:130:eth3:230 \
            64631:eth0:31:eth1:131 \
            64640:eth0:40:eth1:41 \
            64641:eth0:41:eth1:141 \
            64650:eth0:50:eth1:51:eth2:52 \
            64651:eth0:51:eth1:151 \
            64652:eth0:52:eth1:152 \
            G1:eth0:151 \
            G2:eth0:112 \
            L1:eth0:121 \
            C1:eth0:152 \
            C2:eth0:141 \
            C3:eth0:131 \
            C4:eth0:122 \
            C5:eth0:111; do
        OLDIFS="$IFS" ; IFS=":"
        eval set -- $vm
        IFS="$OLDIFS"
        net=""
        name="$1" ; shift
        while [ $# -gt 0 ]; do
            cat <<EOF >> $TMP/switch.rc
port/create $port
alan/create $2
port/setvlan $port $2
EOF
            net="$net $1=vde,$TMP/switch-switch.sock,,$port" ; shift 2
            port=$(($port + 1))
        done
        echo start_vm $name $net >> $TMP/vm.rc
        done
        echo "port/setnumports $port" >> $TMP/switch2.rc
        echo "vlan/create 4093" >> $TMP/switch2.rc
        cat $TMP/switch.rc | sort | uniq | sed 's/^alan/vlan/' >> $TMP/switch2.rc
        setup_switch switch $TMP/switch2.rc
        . $TMP/vm.rc
    
        display_help
        cleanup
        ;;
esac

# Local Variables:
# mode: sh
# indent-tabs-mode: nil
# sh-basic-offset: 4
# End:
