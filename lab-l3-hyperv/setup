#!/bin/sh

LABNAME="l3-hyperv"

cd "$(dirname "$(readlink -f "$0")")"
. ../common/lab-setup

spawn vm HV1 networks 8,9,1,2
spawn vm VM1 network 1
spawn vm VM2 network 2

spawn vm HV2 networks 8,9,3
spawn vm VM3 network 3

spawn vm HV3 networks 8,9,4
spawn vm VM4 network 4

spawn vm internet networks 8,9

spawn vm RR1 network 8
spawn vm RR2 network 9

run

case $uts in
    HV*)

        # Namespaces
        ip netns add public
        public="ip netns exec public"

        # We add some VLAN
        ip link add name eth0.private link eth0 type vlan id 20
        ip link add name eth1.private link eth1 type vlan id 20
        ip link add name eth0.public link eth0 type vlan id 90
        ip link add name eth1.public link eth1 type vlan id 90
        ip link set up dev eth0.private
        ip link set up dev eth1.private

        ip link set netns public dev eth0.public
        ip link set netns public dev eth1.public
        $public ip link set up dev eth0.public
        $public ip link set up dev eth1.public
        vmifaces=""
        for iface in eth2 eth3 eth4 eth5; do
                [ -d /sys/class/net/$iface ] || continue
                vmifaces="$vmifaces $iface"
                ip link set netns public dev $iface
                $public ip link set up dev $iface
        done

        # Fake router IP for VM
        for vmiface in $vmifaces; do
                $public ip addr add 203.0.113.254/32 dev $vmiface
                # For IPv6, this is not needed, but in case someone wants to
                # configure IPv6 manually, we provide a fixed router address.
                $public ip -6 addr add 2001:db8:cb00:7100::fe/128 dev $vmiface
        done

        # IP used for ECMP routing
        $public ip addr add 198.51.100.10${uts#HV}/25 dev eth0.public
        $public ip addr add 198.51.100.20${uts#HV}/25 dev eth1.public
        ip addr add 172.22.15.10${uts#HV}/25 dev eth0.private
        ip addr add 172.22.15.20${uts#HV}/25 dev eth1.private
        $public ip -6 addr add 2001:db8:c633:6400::${uts#HV}/120 dev eth0.public
        $public ip -6 addr add 2001:db8:c633:6401::${uts#HV}/120 dev eth1.public

        # Own IP for private purpose (not really used)
        ip addr add 172.22.2.${uts#HV}/32 dev dummy0
        ip route add 172.22.2.${uts#HV}/32 dev dummy0

        # Some firewall rules as a second level of defense. We could
        # go stateless if we needed to. Another line of defense would
        # be to use containers to get distinct domain of
        # routing. However, it would mean for the orchestrator to also
        # be able to work with containers.
        cat <<EOF'' > /tmp/tools/ip46tables
#!/bin/sh
iptables "$@" && ip6tables "$@"
EOF
        chmod +x /tmp/tools/ip46tables

        # RP filtering. We use Netfilter for that (3.3+).
        $public ip46tables -t raw -N RPFILTER
        $public ip46tables -t raw -A RPFILTER -m rpfilter -j RETURN
        $public iptables   -t raw -A RPFILTER -d 255.255.255.255 -p udp --sport bootpc --dport bootps -j RETURN
        $public ip6tables  -t raw -A RPFILTER -m rpfilter --accept-local -m addrtype --dst-type MULTICAST -j DROP
        $public ip46tables -t raw -A RPFILTER -m limit --limit 5/s --limit-burst 5 \
                   -j LOG --log-prefix "NF: rpfilter: " --log-level warning
        $public ip46tables -t raw -A RPFILTER -j DROP
        for vmiface in $vmifaces; do
                $public ip46tables -t raw -A PREROUTING -i $vmiface -j RPFILTER
        done

        # VM could access BGP/BFD. There is TTL security, but better safe than sorry.
        $public ip46tables -N BGP-BFD
        $public ip46tables -A INPUT -p tcp --dport bgp -j BGP-BFD
        $public ip46tables -A INPUT -p tcp --dport 3784 -j BGP-BFD
        $public ip46tables -A INPUT -p tcp --dport 4784 -j BGP-BFD
        $public iptables -A BGP-BFD -s 198.51.100.0/24 -m ttl --ttl-eq 255 -j ACCEPT
        $public ip6tables -A BGP-BFD -s 2001:db8:c633:6400::/63 -m hl --hl-eq 255 -j ACCEPT
        $public ip46tables -A BGP-BFD -m limit --limit 5/s --limit-burst 5 \
                   -j LOG --log-prefix "NF: BGP/BFD: " --log-level warning
        $public ip46tables -A BGP-BFD -j DROP

        # Don't accept redirects and don't generate them (we don't
        # control how much time it takes for them to expire). As a
        # router, we should not accept redirects, but better safe than
        # sorry.
        # accept_redirects is "AND" when forwarding is enabled
        $public sysctl -qw net.ipv4.conf.all.accept_redirects=0
        $public sysctl -qw net.ipv6.conf.all.accept_redirects=0
        # send_redirects is "OR"
        $public sysctl -qw net.ipv4.conf.all.send_redirects=0
        $public sysctl -qw net.ipv4.conf.default.send_redirects=0
        $public sysctl -qw net.ipv4.conf.eth0/public.send_redirects=0
        $public sysctl -qw net.ipv4.conf.eth1/public.send_redirects=0
        for vmiface in $vmifaces; do
                $public sysctl -qw net.ipv4.conf.$vmiface.send_redirects=0
                # Unfortunately, not possible to disable that for IPv6.
                $public ip6tables -A OUTPUT -o $vmiface -p ipv6-icmp --icmpv6-type redirect -j DROP
        done

        # We do ARP proxying
        $public sysctl -qw net.ipv4.conf.eth0/public.proxy_arp=1
        $public sysctl -qw net.ipv4.conf.eth1/public.proxy_arp=1
        for vmiface in $vmifaces; do
                $public sysctl -qw net.ipv4.conf.$vmiface.proxy_arp=1
                $public sysctl -qw net.ipv4.neigh.$vmiface.proxy_delay=0
        done

        # For IPv6, we use ndppd. Being stateless, it's safe
        # enough. It may answer requests we don't have routes for, but
        # that's not our problem.

        # Add routes to VM. Of course, it should be done by some kind
        # of automatic registration process.
        case ${uts#HV} in
            1)
                    $public ip route add 203.0.113.1/32 dev eth2
                    $public ip route add 203.0.113.2/32 dev eth3
                    $public ip -6 route add 2001:db8:cb00:7100:5254:33ff:fe00:5/128 dev eth2
                    $public ip -6 route add 2001:db8:cb00:7100:5254:33ff:fe00:6/128 dev eth3
                    ;;
            2)
                    $public ip route add 203.0.113.3/32 dev eth2
                    $public ip -6 route add 2001:db8:cb00:7100:5254:33ff:fe00:a/128 dev eth2
                    ;;
            3)
                    $public ip route add 203.0.113.4/32 dev eth2
                    $public ip -6 route add 2001:db8:cb00:7100:5254:33ff:fe00:e/128 dev eth2
                    ;;
        esac

        # We are a router
        $public sysctl -qw net.ipv4.ip_forward=1
        $public sysctl -qw net.ipv6.conf.all.forwarding=1

        service bird
        netns=public service bird

        for vmiface in $vmifaces; do
                sed s/IFACE/$vmiface/ ndppd.HV.conf >> /tmp/ndppd.conf
                sed s/IFACE/$vmiface/ radvd.HV.conf >> /tmp/radvd.conf
        done
        netns=public service radvd ../../tmp/radvd.conf
        netns=public service ndppd ../../tmp/ndppd.conf

        netns=public service dnsmasq \
                --no-ping \
                --no-resolv \
                --port 0 \
                --dhcp-authoritative \
                --dhcp-range=tag:known,203.0.113.0,static,255.255.255.0,infinite \
                --dhcp-host=50:54:33:00:00:05,203.0.113.1,VM1 \
                --dhcp-host=50:54:33:00:00:06,203.0.113.2,VM2 \
                --dhcp-host=50:54:33:00:00:0a,203.0.113.3,VM3 \
                --dhcp-host=50:54:33:00:00:0e,203.0.113.4,VM4 \
                --dhcp-option=option:router,203.0.113.254
        ;;
    RR*)
        ip link add name eth0.public link eth0 type vlan id 90
        ip link add name eth0.private link eth0 type vlan id 20
        ip link set up dev eth0.public
        ip link set up dev eth0.private

        ip addr add 198.51.100.${uts#RR}26/25 dev eth0.public
        ip addr add 172.22.15.${uts#RR}26/25 dev eth0.private
        ip -6 addr add 2001:db8:c633:640$((${uts#RR} - 1))::26/120 dev eth0.public

        service bird
        ;;
    VM*)
        # Classic DHCP request for IPv4
        [ ! -d /etc/dhcp ] || mount -n -t tmpfs tmpfs /etc/dhcp -o rw
        service dhclient -v -4 -1 eth0 -lf /tmp/dhcp.leases -cf /dev/null

        # For IPv6, they will get RA
        ;;

    internet)
        ip link add name eth0.public link eth0 type vlan id 90
        ip link add name eth1.public link eth1 type vlan id 90
        ip link set up dev eth0.public
        ip link set up dev eth1.public

        # For ECMP routing
        ip addr add 198.51.100.1/25 dev eth0.public
        ip addr add 198.51.100.254/25 dev eth1.public
        ip -6 addr add 2001:db8:c633:6400::ff/120 dev eth0.public
        ip -6 addr add 2001:db8:c633:6401::ff/120 dev eth1.public

        # We are a router
        sysctl -qw net.ipv4.ip_forward=1
        sysctl -qw net.ipv6.conf.all.forwarding=1
        service bird

        # "Internet"
        ip addr add 8.8.8.8/32 dev dummy0
        ip -6 addr add 2001:4860:4860::8888/128 dev dummy0
        ;;
esac

service nginx
