#!/bin/sh

LABNAME="l3-hyperv"

cd "$(dirname "$(readlink -f "$0")")"
. ../common/lab-setup

spawn vm HV1 networks 8,9,1
spawn vm VM1 network 1
spawn vm VM2 network 1

spawn vm HV2 networks 8,9,2
spawn vm VM3 network 2

spawn vm HV3 networks 8,9,3
spawn vm VM4 network 3

spawn vm internet networks 8,9

spawn vm RR1 network 8
spawn vm RR2 network 9

spawn vm dhcp network 8,9

run

case $uts in
    HV*)
        # We add some VLAN
        ip link add name eth0.private link eth0 type vlan id 20
        ip link add name eth1.private link eth1 type vlan id 20
        ip link add name eth0.public link eth0 type vlan id 90
        ip link add name eth1.public link eth1 type vlan id 90
        ip link set up dev eth0.private
        ip link set up dev eth1.private
        ip link set up dev eth0.public
        ip link set up dev eth1.public

        # Fake router IP for VM
        ip addr add 203.0.113.254/32 dev eth2
        # For IPv6, this is not needed, but in case someone wants to
        # configure IPv6 manually, we provide a fixed router address.
        ip -6 addr add 2001:db8:cb00:7100::fe/128 dev eth2

        # IP used for ECMP routing
        ip addr add 198.51.100.10${uts#HV}/25 dev eth0.public
        ip addr add 198.51.100.20${uts#HV}/25 dev eth1.public
        ip addr add 172.22.15.10${uts#HV}/25 dev eth0.private
        ip addr add 172.22.15.20${uts#HV}/25 dev eth1.private
        ip -6 addr add 2001:db8:c633:6400::${uts#HV}/120 dev eth0.public
        ip -6 addr add 2001:db8:c633:6401::${uts#HV}/120 dev eth1.public

        # Own IP for private purpose (notably DHCP relay)
        ip addr add 172.22.2.${uts#HV}/32 dev dummy0
        ip route add 172.22.2.${uts#HV}/32 dev dummy0 table 20

        # Some firewall rules as a second level of defense. We could
        # go stateless if we needed to. Another line of defense would
        # be to use containers to get distinct domain of
        # routing. However, it would mean for the orchestrator to also
        # be able to work with containers.
        ip46tables() {
                iptables "$@" && ip6tables "$@"
        }
        for iface in eth0.public eth1.public; do
                ip46tables -A FORWARD -i eth2 -o $iface -j ACCEPT
                ip46tables -A FORWARD -i $iface -o eth2 -j ACCEPT
                ip46tables -A FORWARD -i $iface -o eth0.public -j ACCEPT
                ip46tables -A FORWARD -i $iface -o eth1.public -j ACCEPT
        done
        ip46tables -A FORWARD -i eth2 -o eth2 -j ACCEPT
        ip46tables -A FORWARD -m limit --limit 5/s --limit-burst 5 \
                   -j LOG --log-prefix "NF: routing evasion: " --log-level warning
        ip46tables -A FORWARD -j DROP

        # RP filtering. We use Netfilter for that (3.3+).
        ip46tables -t raw -N RPFILTER
        ip46tables -t raw -A RPFILTER -m rpfilter -j RETURN
        iptables   -t raw -A RPFILTER -d 255.255.255.255 -p udp --sport bootpc --dport bootps -j RETURN
        ip6tables  -t raw -A RPFILTER -m rpfilter --accept-local -m addrtype --dst-type MULTICAST -j DROP
        ip46tables -t raw -A RPFILTER -m limit --limit 5/s --limit-burst 5 \
                   -j LOG --log-prefix "NF: rpfilter: " --log-level warning
        ip46tables -t raw -A RPFILTER -j DROP
        ip46tables -t raw -A PREROUTING -i eth2 -j RPFILTER

        # VM could access BGP/BFD. There is TTL security, but better safe than sorry.
        ip46tables -N BGP-BFD
        ip46tables -A INPUT -p tcp --dport bgp -j BGP-BFD
        ip46tables -A INPUT -p tcp --dport 3784 -j BGP-BFD
        ip46tables -A INPUT -p tcp --dport 4784 -j BGP-BFD
        iptables -A BGP-BFD -s 198.51.100.0/24 -m ttl --ttl-eq 255 -j ACCEPT
        iptables -A BGP-BFD -s 172.22.15.0/24 -m ttl --ttl-eq 255 -j ACCEPT
        ip6tables -A BGP-BFD -s 2001:db8:c633:6400::/63 -m hl --hl-eq 255 -j ACCEPT
        ip46tables -A BGP-BFD -m limit --limit 5/s --limit-burst 5 \
                   -j LOG --log-prefix "NF: BGP/BFD: " --log-level warning
        ip46tables -A BGP-BFD -j DROP

        # Don't accept redirects and don't generate them (we don't
        # control how much time it takes for them to expire). As a
        # router, we should not accept redirects, but better safe than
        # sorry.
        # accept_redirects is "AND" when forwarding is enabled
        sysctl -qw net.ipv4.conf.all.accept_redirects=0
        sysctl -qw net.ipv6.conf.all.accept_redirects=0
        # send_redirects is "OR"
        sysctl -qw net.ipv4.conf.all.send_redirects=0
        sysctl -qw net.ipv4.conf.default.send_redirects=0
        sysctl -qw net.ipv4.conf.eth2.send_redirects=0
        sysctl -qw net.ipv4.conf.eth0/public.send_redirects=0
        sysctl -qw net.ipv4.conf.eth1/public.send_redirects=0
        # Unfortunately, not possible to disable that for IPv6.
        ip6tables -A OUTPUT -o eth2 -p ipv6-icmp --icmpv6-type redirect -j DROP

        # We do ARP proxying
        sysctl -qw net.ipv4.conf.eth2.proxy_arp=1
        sysctl -qw net.ipv4.conf.eth0/public.proxy_arp=1
        sysctl -qw net.ipv4.conf.eth1/public.proxy_arp=1
        sysctl -qw net.ipv4.neigh.eth2.proxy_delay=0

        # For IPv6, we use ndppd. Being stateless, it's safe
        # enough. It may answer requests we don't have routes for, but
        # that's not our problem.

        # Use a public routing table and a private one
        ip rule add iif eth2         lookup 90   priority 20
        ip rule add iif eth2         unreachable priority 21
        ip rule add iif eth0.public  lookup 90   priority 22
        ip rule add iif eth0.public  unreachable priority 23
        ip rule add iif eth1.public  lookup 90   priority 24
        ip rule add iif eth1.public  unreachable priority 25
        ip rule add iif eth0.private lookup 20   priority 26
        ip rule add iif eth0.private unreachable priority 27
        ip rule add iif eth1.private lookup 20   priority 28
        ip rule add iif eth1.private unreachable priority 29
        # For local lookups
        ip rule add iif lo lookup main priority 51
        ip rule add iif lo lookup 20   priority 52
        ip rule add iif lo lookup 90   priority 53 # Last: has a default
        ip rule add unreachable        priority 100

        # Same for IPv6, less important since we don't have private
        # stuff, but link local addresses may still be used.
        ip -6 rule add iif eth2         lookup 90   priority 20
        ip -6 rule add iif eth2         unreachable priority 21
        ip -6 rule add iif eth0.public  lookup 90   priority 22
        ip -6 rule add iif eth0.public  unreachable priority 23
        ip -6 rule add iif eth1.public  lookup 90   priority 24
        ip -6 rule add iif eth1.public  unreachable priority 25
        ip -6 rule add iif lo lookup main priority 51
        ip -6 rule add iif lo lookup 90   priority 53 # Last: has a default
        ip -6 rule add unreachable        priority 100

        # Add routes to VM. Of course, it should be done by some kind
        # of automatic registration process.
        case ${uts#HV} in
            1)
                    ip route add 203.0.113.1/32 dev eth2 table 90
                    ip route add 203.0.113.2/32 dev eth2 table 90
                    ip -6 route add 2001:db8:cb00:7100:5254:33ff:fe00:4/128 dev eth2 table 90
                    ip -6 route add 2001:db8:cb00:7100:5254:33ff:fe00:5/128 dev eth2 table 90
                    ;;
            2)
                    ip route add 203.0.113.3/32 dev eth2 table 90
                    ip -6 route add 2001:db8:cb00:7100:5254:33ff:fe00:9/128 dev eth2 table 90
                    ;;
            3)
                    ip route add 203.0.113.4/32 dev eth2 table 90
                    ip -6 route add 2001:db8:cb00:7100:5254:33ff:fe00:d/128 dev eth2 table 90
                    ;;
        esac

        # We are a router
        sysctl -qw net.ipv4.ip_forward=1
        sysctl -qw net.ipv6.conf.all.forwarding=1

        service bird
        service radvd radvd.HV.conf
        service ndppd ndppd.HV.conf
        service dhcrelay -4 --no-pid -q -i eth2 192.168.17.2 -a -U dummy0
        ;;
    RR*)
        ip link add name eth0.public link eth0 type vlan id 90
        ip link add name eth0.private link eth0 type vlan id 20
        ip link set up dev eth0.public
        ip link set up dev eth0.private

        ip addr add 198.51.100.${uts#RR}26/25 dev eth0.public
        ip addr add 172.22.15.${uts#RR}26/25 dev eth0.private
        ip -6 addr add 2001:db8:c633:640$((${uts#RR} - 1))::26/120 dev eth0.public

        service bird
        ;;
    VM*)
        # Classic DHCP request for IPv4
        [ ! -d /etc/dhcp ] || mount -n -t tmpfs tmpfs /etc/dhcp -o rw 
        service dhclient -v -4 -1 eth0 -lf /tmp/dhcp.leases -cf /dev/null

        # For IPv6, they will get RA
        ;;

    internet)
        ip link add name eth0.public link eth0 type vlan id 90
        ip link add name eth1.public link eth1 type vlan id 90
        ip link set up dev eth0.public
        ip link set up dev eth1.public

        # For ECMP routing
        ip addr add 198.51.100.1/25 dev eth0.public
        ip addr add 198.51.100.254/25 dev eth1.public
        ip -6 addr add 2001:db8:c633:6400::ff/120 dev eth0.public
        ip -6 addr add 2001:db8:c633:6401::ff/120 dev eth1.public

        # Routing
        ip rule add iif lo lookup main priority 51
        ip rule add iif lo lookup 90   priority 53 # Last: has a default
        ip -6 rule add iif lo lookup main priority 51
        ip -6 rule add iif lo lookup 90   priority 53 # Last: has a default

        # We are a router
        sysctl -qw net.ipv4.ip_forward=1
        sysctl -qw net.ipv6.conf.all.forwarding=1
        service bird

        # "Internet"
        ip addr add 8.8.8.8/32 dev dummy0
        ip -6 addr add 2001:4860:4860::8888/128 dev dummy0
        ;;

    dhcp)
        # Only public DHCP is provided. Such a server could be
        # anycasted easily: just spawn a second one like this one,
        # advertising the same loopback address.
        ip link add name eth0.private link eth0 type vlan id 20
        ip link add name eth1.private link eth1 type vlan id 20
        ip link set up dev eth0.private
        ip link set up dev eth1.private

        # For ECMP routing
        ip addr add 172.22.15.2/25 dev eth0.private
        ip addr add 172.22.15.253/25 dev eth1.private

        # DHCP service
        ip addr add 192.168.17.2/32 dev dummy0
        ip route add 192.168.17.2/32 dev dummy0 table 20 # For advertising

        # Routing
        ip rule add iif lo lookup main priority 51
        ip rule add iif lo lookup 20   priority 52
        ip -6 rule add iif lo lookup main priority 51
        ip -6 rule add iif lo lookup 20   priority 52

        service bird
        service dnsmasq \
                --no-ping \
                --no-resolv \
                --port 0 \
                --dhcp-ignore=tag:!known \
                --dhcp-range=tag:known,203.0.113.0,static,255.255.255.0,infinite \
                --dhcp-host=50:54:33:00:00:04,203.0.113.1,VM1 \
                --dhcp-host=50:54:33:00:00:05,203.0.113.2,VM2 \
                --dhcp-host=50:54:33:00:00:09,203.0.113.3,VM3 \
                --dhcp-host=50:54:33:00:00:0d,203.0.113.4,VM4 \
                --dhcp-option=option:router,203.0.113.254
        ;;
esac

service nginx
