#!/bin/sh

LABNAME="bridge-linux"

#VARIANT=bridge
VARIANT=restricted-bridge
#VARIANT=macvtap

cd "$(dirname "$(readlink -f "$0")")"
. ../common/lab-setup

# Which VM to spawn
spawn vm VM1 network 1
spawn vm VM2 network 2
spawn vm VM3 network 3
spawn vm H1 network 4,5,1,2,3   # Hypervisor
spawn vm ER1 network 4,6        # Edge public router
spawn vm IR2 network 5,6        # Internal router


run

# Executed on each VM
case $uts in
    VM*)
        ip addr add 192.0.2.1${uts#VM}/25 dev eth0
        ip -6 addr add 2001:db8:a::1${uts#VM}/64 dev eth0
        # Default to ER1
        ip route add default via 192.0.2.1
        ip -6 route add default via 2001:db8:a::1
        ;;
    H1)
        case $VARIANT in
            bridge)
                # Classic bridge
                brctl addbr br0
                brctl addif br0 eth0    # "Internet"
                brctl addif br0 eth2    # VM1
                brctl addif br0 eth3    # VM2
                brctl addif br0 eth4    # VM3
                ip link set up dev br0
                ;;
            restricted-bridge)
                # Create bridge
                brctl addbr br0
                brctl stp br0 off
                bridge vlan del dev br0 vid 1 self
                for i in 2 3 4; do
                    # Add interface to bridge
                    brctl addif br0 eth$i
                    # Remove VLAN 1, we don't want to use VLAN
                    # stuff. This would double the number of FDB
                    # entries.
                    bridge vlan del dev eth$i vid 1
                    # Add a static FDB entry for it. We use "master"
                    # (and not "self") as we have a software
                    # bridge. We use "static" and not "permanent"
                    # because permanent means "local".
                    bridge fdb add 50:54:33:00:00:0$((i-1)) dev eth$i static master
                    # No learning nor flooding on this port
                    bridge link set dev eth$i \
                           learning off \
                           flood off
                done
                # Add "Internet" port. Learning is off (we don't need
                # that) and any "unknown" unicast is flooded to this
                # port.
                brctl addif br0 eth0
                bridge vlan del dev eth0 vid 1
                bridge link set dev eth0 \
                       learning off \
                       flood on
                # Set up the bridge
                ip link set up dev br0
                ;;
            macvtap)
                modprobe tun
                for i in 2 3 4; do
                    # Prevent any traffic on eth$i (but pcap can still
                    # capture traffic). Those interfaces shouldn't
                    # exist in a real setup.
                    tc qdisc add dev eth$i handle ffff: ingress
                    tc filter add dev eth$i parent ffff: u32 match u8 0 0 action drop
                    # Configure MACVTAP
                    ip link add link eth0 name macvtap$i address 50:54:33:00:00:0$((i-1)) type macvtap mode bridge
                    ip link set up dev macvtap$i
                    # We use a small trick. We have physical
                    # interfaces eth$i and we would like to simulate
                    # the use of macvtap interfaces. We use ubridge
                    # (https://github.com/GNS3/ubridge/) for
                    # that. Performance is quite bad due to design of
                    # ubridge (blocking calls, with 10ms timeout). We
                    # don't care.
                    tap=$(echo /sys/class/net/macvtap$i/tap*)
                    tap=${tap##*/}
                    cat <<EOF >> /tmp/ubridge.ini
[bridge$i]
source_tap = /dev/$tap
destination_ethernet = eth$i
EOF
                done
                ubridge -f /tmp/ubridge.ini &
                ;;
        esac
        ip addr add 192.168.14.3/24 dev eth1
        ip -6 addr add 2001:db8:b::3/64 dev eth1
        ip route add default via 192.168.14.1
        ip -6 route add default via 2001:db8:b::1
        ;;
    ER1)
        sysctl -qw net/ipv4/ip_forward=1
        sysctl -qw net/ipv6/conf/all/forwarding=1
        ip addr add 192.0.2.1/25 dev eth0
        ip addr add 2001:db8:a::1/64 dev eth0
        # Internet...
        ip addr add 203.0.113.10/24 dev eth1
        ;;
    IR2)
        sysctl -qw net/ipv4/ip_forward=1
        sysctl -qw net/ipv6/conf/all/forwarding=1
        ip addr add 192.168.14.1/24 dev eth0
        ip addr add 2001:db8:b::1/64 dev eth0
        iptables -t nat -I POSTROUTING -o eth1 -j MASQUERADE
        # Internet...
        ip addr add 203.0.113.11/24 dev eth1
        ip route add 192.0.2.0/25 via 203.0.113.10
        ;;
esac
