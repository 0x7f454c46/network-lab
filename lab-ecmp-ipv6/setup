#!/bin/sh

LABNAME="ecmp-ipv6"
PROGNAME=$(readlink -f $0)
PROGARGS="$@"

ROOT=$(readlink -f ${ROOT:-/})
LINUX=$(readlink -f ${LINUX:-./linux})

WHICH=$(which which)
DEPS="screen vde_switch start-stop-daemon kvm busybox slirpvde"
CHROOTDEPS="ip dhclient"

info() {
    echo "[1;34m[+] $@[0m"
}

error() {
    echo "[1;31m[+] $@[0m"
}

# Setup a TMP directory
setup_tmp() {
    TMP=$(mktemp -d)
    trap "rm -rf $TMP" EXIT
    info "TMP is $TMP"
}

# Check for dependencies needed by this tool
check_dependencies() {
    for dep in $DEPS; do
        $WHICH $dep 2> /dev/null > /dev/null || {
            error "Missing dependency: $dep"
            exit 1
        }
    done
    [ -d $ROOT ] || {
        error "Chroot $ROOT does not exists"
    }
    for dep in $CHROOTDEPS; do
        PATH=$ROOT/usr/local/bin:$ROOT/usr/bin:$ROOT/bin:$ROOT/sbin:$ROOT/usr/local/sbin:$ROOT/usr/sbin \
            $WHICH $dep 2> /dev/null > /dev/null || {
            error "Missing dependency: $dep (in $ROOT)"
            exit 1
        }
    done
}

# Run our lab in screen
setup_screen() {
    [ x"$TERM" = x"screen" ] || \
        exec screen -ln -S $LABNAME -c /dev/null -t main "$PROGNAME" "$PROGARGS"
    sleep 1
    screen -X caption always "%{= wk}%-w%{= BW}%n %t%{-}%+w %-="
    screen -X zombie cr
}

### Stolen from initramfs-tools
# $1 = file to copy to ramdisk
# $2 (optional) Name for the file on the ramdisk
# Location of the image dir is assumed to be $DESTDIR
# We never overwrite the target if it exists.
copy_exec() {
	local src target x nonoptlib
	local libname dirname

	src="${1}"
	target="${2:-$1}"

	[ -f "${src}" ] || return 1

	if [ -d "${DESTDIR}/${target}" ]; then
		# check if already copied
		[ -e "${DESTDIR}/$target/${src##*/}" ] && return 0
	else
		[ -e "${DESTDIR}/$target" ] && return 0
		#FIXME: inst_dir
		mkdir -p "${DESTDIR}/${target%/*}"
	fi

	cp -pL "${src}" "${DESTDIR}/${target}"

	# Copy the dependant libraries
	for x in $(ldd "${src}" 2>/dev/null | sed -e '
		/\//!d;
		/linux-gate/d;
		/=>/ {s/.*=>[[:blank:]]*\([^[:blank:]]*\).*/\1/};
		s/[[:blank:]]*\([^[:blank:]]*\) (.*)/\1/' 2>/dev/null); do

		# Try to use non-optimised libraries where possible.
		# We assume that all HWCAP libraries will be in tls,
		# sse2, vfp or neon.
		nonoptlib=$(echo "${x}" | sed -e 's#/lib/\([^/]*/\)\?\(tls\|i686\|sse2\|neon\|vfp\).*/\(lib.*\)#/lib/\1\3#')
		nonoptlib=$(echo "${nonoptlib}" | sed -e 's#-linux-gnu/\(tls\|i686\|sse2\|neon\|vfp\).*/\(lib.*\)#-linux-gnu/\2#')

		if [ -e "${nonoptlib}" ]; then
			x="${nonoptlib}"
		fi

		libname=$(basename "${x}")
		dirname=$(dirname "${x}")

		# FIXME inst_lib
		mkdir -p "${DESTDIR}/${dirname}"
		if [ ! -e "${DESTDIR}/${dirname}/${libname}" ]; then
			cp -pL "${x}" "${DESTDIR}/${dirname}"
		fi
	done
}

# Setup initrd
setup_initrd() {
    info "Build initrd"
    DESTDIR=$TMP/initrd
    mkdir -p $DESTDIR

    # Setup busybox
    copy_exec $($WHICH busybox) /bin/busybox
    for applet in $(${DESTDIR}/bin/busybox --list); do
        ln -s busybox ${DESTDIR}/bin/${applet}
    done

    # Setup init
    cp $PROGNAME ${DESTDIR}/init

    cd "${DESTDIR}" && find . | cpio --quiet -R 0:0 -o -H newc | gzip > $TMP/initrd.gz
}

# Setup a VDE switch
setup_switch() {
    info "Setup switch $1"
    start-stop-daemon -b --no-close --make-pidfile --pidfile "$TMP/switch-$1.pid" \
        --start --startas $($WHICH vde_switch) -- \
        --sock "$TMP/switch-$1.sock"
}

# Plug "Internet" to a switch
setup_internet() {
    info "Setup internet on switch $1"
    start-stop-daemon -b --no-close --make-pidfile --pidfile "$TMP/internet-$1.pid" \
        --start --startas $($WHICH slirpvde) -- \
        --sock "$TMP/switch-$1.sock" \
        -H 192.168.$1.1/24 -D
    sleep 0.3
}

# Start a VM
start_vm() {
    info "Start VM $1"
    name="$1"
    shift

    netargs=""
    saveifs="$IFS"
    IFS=,
    for net in $NET; do
        mac=$(echo $name-$net | sha1sum | \
            awk '{print "52:54:" substr($1,0,2) ":" substr($1, 2, 2) ":" substr($1, 4, 2) ":" substr($1, 6, 2)}')
        netargs="$netargs -net nic,model=virtio,macaddr=$mac,vlan=$net"
        netargs="$netargs -net vde,sock=$TMP/switch-$net.sock,vlan=$net"
    done
    IFS="$saveifs"

    screen -t $name \
        start-stop-daemon --make-pidfile --pidfile "$TMP/vm-$name.pid" \
        --start --startas $($WHICH kvm) -- \
        -nodefconfig -no-user-config -nodefaults \
        -m 256m \
        -display none \
        \
        -chardev stdio,id=charserial0,signal=off \
        -device isa-serial,chardev=charserial0,id=serial0 \
        -chardev socket,id=charserial1,path=$TMP/vm-$name-serial.pipe,server,nowait \
        -device isa-serial,chardev=charserial1,id=serial1 \
        \
        -chardev socket,id=con0,path=$TMP/vm-$name-console.pipe,server,nowait \
        -mon chardev=con0,mode=readline,default \
        \
        -fsdev local,security_model=passthrough,id=fsdev-root,path=${ROOT},readonly \
        -device virtio-9p-pci,id=fs-root,fsdev=fsdev-root,mount_tag=rootshare \
        -fsdev local,security_model=none,id=fsdev-home,path=${HOME} \
        -device virtio-9p-pci,id=fs-home,fsdev=fsdev-home,mount_tag=homeshare \
        -fsdev local,security_model=none,id=fsdev-lab,path=$(dirname "$PROGNAME") \
        -device virtio-9p-pci,id=fs-lab,fsdev=fsdev-lab,mount_tag=labshare \
        \
        -gdb unix:$TMP/vm-$name-gdb.pipe,server,nowait \
        -kernel $LINUX \
        -initrd $TMP/initrd.gz \
        -append "init=/bin/sh console=ttyS0 uts=$name" \
        $netargs \
        "$@"
    echo "GDB server listening on.... $TMP/vm-$name-gdb.pipe"
    echo "monitor listening on....... $TMP/vm-$name-console.pipe"
    echo "ttyS1 listening on......... $TMP/vm-$name-serial.pipe"
    screen -X select 0
}

start_quagga() {
    info "Prepare Quagga"

    # Quagga is expected to be installed in /opt/quagga
    export VTYSH_PAGER=/bin/cat
    export PATH=/opt/quagga/bin:/opt/quagga/sbin:$PATH
    export LD_LIBRARY_PATH=/opt/quagga/lib${LD_LIBRARY_PATH+:$LD_LIBRARY_PATH}

    [ -d /opt/quagga/bin ] || mkdir -p /opt/quagga/bin
    [ -d /opt/quagga/run ] || mkdir -p /opt/quagga/run
    [ -d /var/log/quagga ] || mkdir -p /var/log/quagga

    info 'Use `quagga` to start Quagga'
    cat <<"EOF" > /opt/quagga/bin/quagga
#!/bin/sh
set -e
rm -rf /opt/quagga/etc
ln -s /lab/$uts/quagga /opt/quagga/etc
rm -f /opt/quagga/etc/*.sample*
for daemon in $(ls /opt/quagga/sbin); do
   [ -f /opt/quagga/etc/$daemon.conf ] || continue
   echo -n "Start $daemon... "
   /opt/quagga/sbin/$daemon -d -u root -g root
   echo "ok"
done
EOF
    chmod +x /opt/quagga/bin/quagga
}

display_help() {
    cat <<EOF

Some screen commands :
 C-a d     - Detach the screen (resume with screen -r $LABNAME)
 C-a "     - Select a window
 C-a space - Next window
 C-a C-a   - Previous window
EOF
    echo "Press enter to exit the lab"
    read a
}

cleanup() {
    for pid in $TMP/*.pid; do
        kill -15 -$(cat $pid) 2> /dev/null || true
    done
    sleep 1
    for pid in $TMP/*.pid; do
        kill -9 -$(cat $pid) 2> /dev/null || true
    done
    rm -rf $TMP # sh does not seem to handle "trap EXIT"
    screen -X quit
}

export STATE=${STATE:-0}
case $$,$0,$STATE in
    1,/init,0)
        # Initrd
        info "Setup hostname"
        hostname ${uts}
        info "Set path"
        export TERM=screen
        export PATH=/usr/local/bin:/usr/bin:/bin:/sbin:/usr/local/sbin:/usr/sbin
        export HOME=/root

        info "Setup overlayfs"
        mkdir /target
        mkdir /target/ro
        mkdir /target/rw
        mkdir /target/overlay
        # Version 9p2000.u allows to access /dev, /sys and mount new
        # partitions over them. This is not the case for 9p2000.L.
        mount -t 9p        rootshare /target/ro      -o trans=virtio,version=9p2000.u
        mount -t tmpfs     tmpfs     /target/rw      -o rw
        mount -t overlayfs overlayfs /target/overlay -o lowerdir=/target/ro,upperdir=/target/rw
        mount -n -t proc  proc /target/overlay/proc
        mount -n -t sysfs sys  /target/overlay/sys

        info "Mount home directory on /root"
        mount -t 9p homeshare /target/overlay/root -o trans=virtio,version=9p2000.L,access=0,rw

        info "Mount lab directory on /lab"
        mkdir /target/overlay/lab
        mount -t 9p labshare /target/overlay/lab -o trans=virtio,version=9p2000.L,access=0,rw

        info "Chroot"
        export STATE=1
        cp "$PROGNAME" /target/overlay
        exec chroot /target/overlay "$PROGNAME"
        ;;
    1,/init,1)
        # In chroot
        info "Start udev"
        /etc/init.d/udev start

        info "Clean out /tmp and /run directories"
        for fs in /run /var/run /var/tmp /var/log /tmp; do
            mount -t tmpfs tmpfs $fs -o rw,nosuid,nodev
        done

        info "Setup interfaces"
        for intf in /sys/class/net/*; do
            intf=$(basename $intf)
            ip a l dev $intf 2> /dev/null >/dev/null || continue
            case $intf in
                lo|eth*|dummy*)
                    ip link set up dev $intf
                    ;;
            esac
        done

        info "Start syslog"
        rsyslogd

        info "Setup terminal"
        export STATE=2
        exec setsid /sbin/getty -L ttyS0 -a root -l "$PROGNAME" -i 115200
        ;;
    *,/init,2)
        export TERM=screen

        info "Lab specific setup"
        export STATE=3
        . "$PROGNAME"

        while true; do
            info "Spawning a shell"
            cd $HOME
            export SSH_TTY=$(tty)
            if [ -f $HOME/.zshrc ]; then
                /bin/zsh -i
            else
                /bin/bash -i
            fi || sleep 1
        done
        ;;
    *,/init,3)
        # Specific setup for this lab
        info "Enable forwarding"
        sysctl -w net.ipv6.conf.all.forwarding=1

        info "Setup IP addresses"
        case $uts in
            r1)
                ip -6 addr add 2001:db8:1::1/64 dev eth0
                ip -6 addr add 2001:db8:2::1/64 dev eth1
                ip -6 addr add 2001:db8:99::1/64 dev dummy0
                # Routes to R2 are static
                ip -6 route add    2001:db8:98::/64 via 2001:db8:1::2 dev eth0
                ip -6 route append 2001:db8:98::/64 via 2001:db8:2::2 dev eth1
                ;;
            r2)
                ip -6 addr add 2001:db8:1::2/64 dev eth0
                ip -6 addr add 2001:db8:2::2/64 dev eth1
                ip -6 addr add 2001:db8:98::1/64 dev dummy0
                # Routes to R1 will be learned through OSPF
                ;;
        esac

        info "Ask DHCP"
        rm /etc/resolv.conf
        rm /etc/dhcp*/dhclient-enter-hooks.d/resolvconf
        dhclient eth2

        start_quagga
        ;;
    *,*,*)
        [ $(id -u) != 0 ] || {
            error "You should not run this as root"
            exit 1
        }
        check_dependencies
        setup_screen
        setup_tmp
        setup_initrd

        setup_switch   1
        setup_switch   2
        setup_switch   3
        setup_internet 3
        NET=1,2,3 start_vm r1
        NET=1,2,3 start_vm r2

        display_help
        cleanup
        ;;
esac

# Local Variables:
# mode: sh
# indent-tabs-mode: nil
# sh-basic-offset: 4
# End:
